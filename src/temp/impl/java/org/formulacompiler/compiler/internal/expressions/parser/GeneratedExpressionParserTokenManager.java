/* Generated By:JavaCC: Do not edit this line. GeneratedExpressionParserTokenManager.java */
package org.formulacompiler.compiler.internal.expressions.parser;
import java.util.Collection;
import org.formulacompiler.runtime.*;
import org.formulacompiler.compiler.*;
import org.formulacompiler.compiler.internal.expressions.*;

/** Token Manager. */
public class GeneratedExpressionParserTokenManager implements GeneratedExpressionParserConstants
{

  /** Debug output. */
  public  java.io.PrintStream debugStream = System.out;
  /** Set debug output. */
  public  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private final int jjStopStringLiteralDfa_0(int pos, long active0, long active1, long active2, long active3, long active4)
{
   switch (pos)
   {
      case 0:
         if ((active2 & 0x1ffc00000000000L) != 0L || (active3 & 0xbffe00000000000L) != 0L)
            return 173;
         if ((active0 & 0x1000000140L) != 0L)
            return 2;
         if ((active4 & 0x2000L) != 0L)
            return 164;
         if ((active0 & 0xfffff00000000000L) != 0L || (active1 & 0xffff7fbfffffffffL) != 0L || (active2 & 0xfe003fffffffffffL) != 0L || (active3 & 0xf0001fffffc001ffL) != 0L || (active4 & 0x7fL) != 0L)
         {
            jjmatchedKind = 312;
            return 173;
         }
         if ((active4 & 0x2000000000000L) != 0L)
            return 27;
         if ((active0 & 0x60003000000L) != 0L || (active1 & 0x804000000000L) != 0L || (active3 & 0x400000000000000L) != 0L || (active4 & 0x7ffffd900L) != 0L)
         {
            jjmatchedKind = 312;
            return 174;
         }
         if ((active3 & 0x3ffe00L) != 0L)
         {
            jjmatchedKind = 312;
            return 15;
         }
         return -1;
      case 1:
         if ((active0 & 0x100L) != 0L)
            return 0;
         if ((active1 & 0x200000000100000L) != 0L || (active2 & 0xc00800008000004L) != 0L || (active3 & 0x81L) != 0L)
            return 173;
         if ((active4 & 0x115108000L) != 0L)
            return 174;
         if ((active0 & 0x60003000000L) != 0L || (active1 & 0x804000000000L) != 0L || (active3 & 0x400000000000000L) != 0L || (active4 & 0x6eaef5900L) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 312;
               jjmatchedPos = 1;
            }
            return 174;
         }
         if ((active0 & 0xfffff00000000000L) != 0L || (active1 & 0xfdff7fbfffefffffL) != 0L || (active2 & 0xf3ff3ffff7fffffbL) != 0L || (active3 & 0xfbffdfffffffff7eL) != 0L || (active4 & 0x7fL) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 312;
               jjmatchedPos = 1;
            }
            return 173;
         }
         return -1;
      case 2:
         if ((active0 & 0x20900000000000L) != 0L || (active1 & 0x1430008c0300L) != 0L || (active2 & 0x3600dc4f6000070L) != 0L || (active3 & 0xc000dfc016300002L) != 0L || (active4 & 0x3L) != 0L)
            return 173;
         if ((active1 & 0x4000000000L) != 0L || (active4 & 0x80005000L) != 0L)
            return 174;
         if ((active0 & 0xffdf600000000000L) != 0L || (active1 & 0xfdff6b8fff63fcffL) != 0L || (active2 & 0xf89f323b01ffff8bL) != 0L || (active3 & 0x3bff003fe9cfff7cL) != 0L || (active4 & 0x7cL) != 0L)
         {
            if (jjmatchedPos != 2)
            {
               jjmatchedKind = 312;
               jjmatchedPos = 2;
            }
            return 173;
         }
         if ((active0 & 0x60003000000L) != 0L || (active1 & 0x800000000000L) != 0L || (active3 & 0x400000000000000L) != 0L || (active4 & 0x67bef0900L) != 0L)
         {
            if (jjmatchedPos != 2)
            {
               jjmatchedKind = 312;
               jjmatchedPos = 2;
            }
            return 174;
         }
         return -1;
      case 3:
         if ((active0 & 0xefc0000000000000L) != 0L || (active1 & 0xfdf54781e36a7cfbL) != 0L || (active2 & 0xf01f313bc1fd77aaL) != 0L || (active3 & 0x38450fbf60cfa36cL) != 0L || (active4 & 0x5cL) != 0L)
         {
            if (jjmatchedPos != 3)
            {
               jjmatchedKind = 312;
               jjmatchedPos = 3;
            }
            return 173;
         }
         if ((active0 & 0x101f600000000000L) != 0L || (active1 & 0xa282e1c018204L) != 0L || (active2 & 0x800a0004028801L) != 0L || (active3 & 0x83ba80008d005c10L) != 0L || (active4 & 0x21L) != 0L)
            return 173;
         if ((active0 & 0x60003000000L) != 0L || (active1 & 0x800000000000L) != 0L || (active2 & 0x800000000000000L) != 0L || (active4 & 0x4490c0900L) != 0L)
         {
            if (jjmatchedPos != 3)
            {
               jjmatchedKind = 312;
               jjmatchedPos = 3;
            }
            return 174;
         }
         if ((active3 & 0x400000000000000L) != 0L || (active4 & 0x232e30000L) != 0L)
            return 174;
         if ((active2 & 0x20000000L) != 0L)
         {
            if (jjmatchedPos != 3)
            {
               jjmatchedKind = 299;
               jjmatchedPos = 3;
            }
            return 175;
         }
         return -1;
      case 4:
         if ((active0 & 0xa400000000000L) != 0L || (active1 & 0xc5420802003c02L) != 0L || (active2 & 0x100a00010308L) != 0L || (active3 & 0x3845019e600f8008L) != 0L || (active4 & 0x40L) != 0L)
            return 173;
         if ((active0 & 0x3000000L) != 0L || (active1 & 0x800000000000L) != 0L || (active4 & 0x49080100L) != 0L)
            return 174;
         if ((active0 & 0xefc0000000000000L) != 0L || (active1 & 0xfd300581e16340f9L) != 0L || (active2 & 0xf01f2131c1fc74a2L) != 0L || (active3 & 0x120082100c02364L) != 0L || (active4 & 0x1cL) != 0L)
         {
            if (jjmatchedPos != 4)
            {
               jjmatchedKind = 312;
               jjmatchedPos = 4;
            }
            return 173;
         }
         if ((active0 & 0x10000000000000L) != 0L || (active2 & 0x20000000L) != 0L)
            return 175;
         if ((active0 & 0x60000000000L) != 0L || (active2 & 0x800000000000000L) != 0L || (active4 & 0x400040800L) != 0L)
         {
            if (jjmatchedPos != 4)
            {
               jjmatchedKind = 312;
               jjmatchedPos = 4;
            }
            return 174;
         }
         if ((active1 & 0x80000L) != 0L || (active3 & 0x60000000000L) != 0L)
         {
            if (jjmatchedPos != 4)
            {
               jjmatchedKind = 299;
               jjmatchedPos = 4;
            }
            return 175;
         }
         return -1;
      case 5:
         if ((active0 & 0x4040000000000000L) != 0L || (active1 & 0x300001a0600899L) != 0L || (active2 & 0x2000212140004000L) != 0L || (active3 & 0xc00c00040L) != 0L)
            return 173;
         if ((active0 & 0x60000000000L) != 0L || (active1 & 0x8000000000L) != 0L || (active2 & 0x800000000000000L) != 0L || (active3 & 0x60000000000L) != 0L || (active4 & 0x400040800L) != 0L)
         {
            if (jjmatchedPos != 5)
            {
               jjmatchedKind = 312;
               jjmatchedPos = 5;
            }
            return 174;
         }
         if ((active1 & 0x80000L) != 0L)
         {
            if (jjmatchedPos != 5)
            {
               jjmatchedKind = 299;
               jjmatchedPos = 5;
            }
            return 175;
         }
         if ((active0 & 0xaf80000000000000L) != 0L || (active1 & 0xfd00050041035060L) != 0L || (active2 & 0xd01f001081fc36a2L) != 0L || (active3 & 0x1200821000c2324L) != 0L || (active4 & 0x1cL) != 0L)
         {
            if (jjmatchedPos != 5)
            {
               jjmatchedKind = 312;
               jjmatchedPos = 5;
            }
            return 173;
         }
         return -1;
      case 6:
         if ((active0 & 0xaa80000000000000L) != 0L || (active1 & 0xf000000101401000L) != 0L || (active2 & 0x1004001000000280L) != 0L || (active3 & 0x800082224L) != 0L || (active4 & 0x1cL) != 0L)
            return 173;
         if ((active4 & 0x400040800L) != 0L)
            return 174;
         if ((active0 & 0x500000000000000L) != 0L || (active1 & 0xd20050040034060L) != 0L || (active2 & 0xc01b000080003422L) != 0L || (active3 & 0x120002100040100L) != 0L)
         {
            jjmatchedKind = 312;
            jjmatchedPos = 6;
            return 173;
         }
         if ((active0 & 0x60000000000L) != 0L || (active1 & 0x8000000000L) != 0L || (active2 & 0x800000001fc0000L) != 0L || (active3 & 0x60000000000L) != 0L)
         {
            jjmatchedKind = 312;
            jjmatchedPos = 6;
            return 174;
         }
         if ((active1 & 0x80000L) != 0L || (active3 & 0x80000000000L) != 0L)
            return 175;
         return -1;
      case 7:
         if ((active0 & 0x60000000000L) != 0L || (active1 & 0x8000000000L) != 0L || (active2 & 0x800000001fc0000L) != 0L)
         {
            jjmatchedKind = 312;
            jjmatchedPos = 7;
            return 174;
         }
         if ((active0 & 0x100000000000000L) != 0L || (active1 & 0x900000040020000L) != 0L || (active2 & 0x12000000002000L) != 0L || (active3 & 0x100000000000100L) != 0L)
            return 173;
         if ((active3 & 0x60000000000L) != 0L)
            return 174;
         if ((active0 & 0x400000000000000L) != 0L || (active1 & 0x420050000014060L) != 0L || (active2 & 0xc009000080001422L) != 0L || (active3 & 0x20002100040000L) != 0L)
         {
            jjmatchedKind = 312;
            jjmatchedPos = 7;
            return 173;
         }
         return -1;
      case 8:
         if ((active0 & 0x400000000000000L) != 0L || (active1 & 0x420050000014000L) != 0L || (active2 & 0x8000000001420L) != 0L || (active3 & 0x20000000040000L) != 0L)
            return 173;
         if ((active0 & 0x60000000000L) != 0L)
            return 174;
         if ((active1 & 0x8000000000L) != 0L || (active2 & 0x800000001fc0000L) != 0L)
         {
            jjmatchedKind = 312;
            jjmatchedPos = 8;
            return 174;
         }
         if ((active1 & 0x60L) != 0L || (active2 & 0xc001000080000002L) != 0L || (active3 & 0x2100000000L) != 0L)
         {
            jjmatchedKind = 312;
            jjmatchedPos = 8;
            return 173;
         }
         return -1;
      case 9:
         if ((active1 & 0x40L) != 0L || (active2 & 0x4000000000000000L) != 0L || (active3 & 0x2000000000L) != 0L)
            return 173;
         if ((active1 & 0x8000000000L) != 0L)
            return 174;
         if ((active2 & 0x800000001fc0000L) != 0L)
         {
            jjmatchedKind = 312;
            jjmatchedPos = 9;
            return 174;
         }
         if ((active1 & 0x20L) != 0L || (active2 & 0x8001000080000002L) != 0L || (active3 & 0x100000000L) != 0L)
         {
            jjmatchedKind = 312;
            jjmatchedPos = 9;
            return 173;
         }
         return -1;
      case 10:
         if ((active1 & 0x20L) != 0L || (active2 & 0x8000000080000002L) != 0L || (active3 & 0x100000000L) != 0L)
            return 173;
         if ((active2 & 0x1000000000000L) != 0L)
         {
            jjmatchedKind = 312;
            jjmatchedPos = 10;
            return 173;
         }
         if ((active2 & 0x400000L) != 0L)
            return 174;
         if ((active2 & 0x800000001bc0000L) != 0L)
         {
            jjmatchedKind = 312;
            jjmatchedPos = 10;
            return 174;
         }
         return -1;
      case 11:
         if ((active2 & 0x1000000000000L) != 0L)
            return 173;
         if ((active2 & 0x200000L) != 0L)
            return 174;
         if ((active2 & 0x8000000019c0000L) != 0L)
         {
            jjmatchedKind = 312;
            jjmatchedPos = 11;
            return 174;
         }
         return -1;
      case 12:
         if ((active2 & 0x80000L) != 0L)
            return 174;
         if ((active2 & 0x800000001940000L) != 0L)
         {
            jjmatchedKind = 312;
            jjmatchedPos = 12;
            return 174;
         }
         return -1;
      case 13:
         if ((active2 & 0x140000L) != 0L)
            return 174;
         if ((active2 & 0x800000001800000L) != 0L)
         {
            jjmatchedKind = 312;
            jjmatchedPos = 13;
            return 174;
         }
         return -1;
      case 14:
         if ((active2 & 0x1000000L) != 0L)
            return 174;
         if ((active2 & 0x800000000800000L) != 0L)
         {
            jjmatchedKind = 312;
            jjmatchedPos = 14;
            return 174;
         }
         return -1;
      case 15:
         if ((active2 & 0x800000000000000L) != 0L)
         {
            jjmatchedKind = 312;
            jjmatchedPos = 15;
            return 174;
         }
         if ((active2 & 0x800000L) != 0L)
            return 174;
         return -1;
      case 16:
         if ((active2 & 0x800000000000000L) != 0L)
         {
            jjmatchedKind = 312;
            jjmatchedPos = 16;
            return 174;
         }
         return -1;
      case 17:
         if ((active2 & 0x800000000000000L) != 0L)
         {
            jjmatchedKind = 312;
            jjmatchedPos = 17;
            return 174;
         }
         return -1;
      case 18:
         if ((active2 & 0x800000000000000L) != 0L)
         {
            jjmatchedKind = 312;
            jjmatchedPos = 18;
            return 174;
         }
         return -1;
      case 19:
         if ((active2 & 0x800000000000000L) != 0L)
         {
            jjmatchedKind = 312;
            jjmatchedPos = 19;
            return 174;
         }
         return -1;
      case 20:
         if ((active2 & 0x800000000000000L) != 0L)
         {
            jjmatchedKind = 312;
            jjmatchedPos = 20;
            return 174;
         }
         return -1;
      case 21:
         if ((active2 & 0x800000000000000L) != 0L)
         {
            jjmatchedKind = 312;
            jjmatchedPos = 21;
            return 174;
         }
         return -1;
      case 22:
         if ((active2 & 0x800000000000000L) != 0L)
         {
            jjmatchedKind = 312;
            jjmatchedPos = 22;
            return 174;
         }
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_0(int pos, long active0, long active1, long active2, long active3, long active4)
{
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0, active1, active2, active3, active4), pos + 1);
}
private int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
private int jjMoveStringLiteralDfa0_0()
{
   switch(curChar)
   {
      case 33:
         return jjStopAtPos(0, 263);
      case 35:
         return jjStartNfaWithStates_0(0, 269, 164);
      case 37:
         return jjStopAtPos(0, 38);
      case 38:
         return jjStopAtPos(0, 32);
      case 40:
         return jjStopAtPos(0, 39);
      case 41:
         return jjStopAtPos(0, 40);
      case 42:
         return jjStopAtPos(0, 35);
      case 43:
         return jjStopAtPos(0, 33);
      case 45:
         return jjStopAtPos(0, 34);
      case 47:
         jjmatchedKind = 36;
         return jjMoveStringLiteralDfa1_0(0x140L, 0x0L, 0x0L, 0x0L, 0x0L);
      case 58:
         return jjStartNfaWithStates_0(0, 305, 27);
      case 60:
         jjmatchedKind = 28;
         return jjMoveStringLiteralDfa1_0(0x28000000L, 0x0L, 0x0L, 0x0L, 0x0L);
      case 61:
         return jjStopAtPos(0, 26);
      case 62:
         jjmatchedKind = 30;
         return jjMoveStringLiteralDfa1_0(0x80000000L, 0x0L, 0x0L, 0x0L, 0x0L);
      case 64:
         return jjStopAtPos(0, 43);
      case 65:
         return jjMoveStringLiteralDfa1_0(0xfff00000000000L, 0x0L, 0x0L, 0x0L, 0x0L);
      case 66:
         return jjMoveStringLiteralDfa1_0(0x700000000000000L, 0x0L, 0x0L, 0x0L, 0x0L);
      case 67:
         return jjMoveStringLiteralDfa1_0(0xf800000000000000L, 0x7fffL, 0x0L, 0x0L, 0x0L);
      case 68:
         return jjMoveStringLiteralDfa1_0(0x0L, 0xfffff8000L, 0x0L, 0x0L, 0x0L);
      case 69:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x1fb000000000L, 0x0L, 0x0L, 0x0L);
      case 70:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x3ff600000000000L, 0x0L, 0x0L, 0x0L);
      case 71:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x3c00000000000000L, 0x0L, 0x0L, 0x0L);
      case 72:
         return jjMoveStringLiteralDfa1_0(0x0L, 0xc000000000000000L, 0x3L, 0x0L, 0x0L);
      case 73:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x7ffcL, 0x0L, 0x0L);
      case 75:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x8000L, 0x0L, 0x0L);
      case 76:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x3ffff0000L, 0x0L, 0x0L);
      case 77:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x3ffc00000000L, 0x0L, 0x0L);
      case 78:
         jjmatchedKind = 174;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x1ff800000000000L, 0x0L, 0x0L);
      case 79:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0xe00000000000000L, 0x0L, 0x0L);
      case 80:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0xf000000000000000L, 0xffL, 0x0L);
      case 81:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0x100L, 0x0L);
      case 82:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0x3ffe00L, 0x0L);
      case 83:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0x1fffffc00000L, 0x0L);
      case 84:
         jjmatchedKind = 237;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0xbffc00000000000L, 0x0L);
      case 85:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0x1000000000000000L, 0x0L);
      case 86:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0xe000000000000000L, 0x7L);
      case 87:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0x0L, 0x18L);
      case 89:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0x0L, 0x20L);
      case 90:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0x0L, 0x40L);
      case 91:
         return jjStopAtPos(0, 306);
      case 94:
         return jjStopAtPos(0, 37);
      case 95:
         return jjMoveStringLiteralDfa1_0(0x60003000000L, 0x0L, 0x0L, 0x0L, 0x0L);
      case 97:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0x0L, 0x4080000L);
      case 99:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0x0L, 0x8000000L);
      case 100:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0x0L, 0x1000L);
      case 101:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x4000000000L, 0x0L, 0x0L, 0xc2400000L);
      case 102:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x800000000000L, 0x0L, 0x0L, 0x30000L);
      case 105:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0x0L, 0x11148000L);
      case 108:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0x0L, 0x200004000L);
      case 114:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0x0L, 0x900L);
      case 116:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0x400000000000000L, 0x100200000L);
      case 118:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0x0L, 0x400000000L);
      case 119:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0x0L, 0x20800000L);
      case 123:
         return jjStopAtPos(0, 265);
      case 125:
         return jjStopAtPos(0, 266);
      default :
         return jjMoveNfa_0(3, 0);
   }
}
private int jjMoveStringLiteralDfa1_0(long active0, long active1, long active2, long active3, long active4)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, active0, active1, active2, active3, active4);
      return 1;
   }
   switch(curChar)
   {
      case 42:
         if ((active0 & 0x100L) != 0L)
            return jjStartNfaWithStates_0(1, 8, 0);
         break;
      case 47:
         if ((active0 & 0x40L) != 0L)
            return jjStopAtPos(1, 6);
         break;
      case 61:
         if ((active0 & 0x20000000L) != 0L)
            return jjStopAtPos(1, 29);
         else if ((active0 & 0x80000000L) != 0L)
            return jjStopAtPos(1, 31);
         break;
      case 62:
         if ((active0 & 0x8000000L) != 0L)
            return jjStopAtPos(1, 27);
         break;
      case 65:
         if ((active2 & 0x800000000000L) != 0L)
            return jjStartNfaWithStates_0(1, 175, 173);
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x5c006000000f8000L, active2, 0xc00010000L, active3, 0xe000c00000001e00L, active4, 0x1L);
      case 66:
         if ((active1 & 0x100000L) != 0L)
            return jjStartNfaWithStates_0(1, 84, 173);
         return jjMoveStringLiteralDfa2_0(active0, 0x100000000000L, active1, 0L, active2, 0L, active3, 0L, active4, 0L);
      case 67:
         return jjMoveStringLiteralDfa2_0(active0, 0x600000000000L, active1, 0x600000L, active2, 0L, active3, 0L, active4, 0L);
      case 68:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x1000000800000L, active2, 0x200001000000000L, active3, 0x1000000000000L, active4, 0x2L);
      case 69:
         return jjMoveStringLiteralDfa2_0(active0, 0xb00000000000000L, active1, 0x2000000003000000L, active2, 0xf001002007fe0000L, active3, 0x8000000c06000L, active4, 0x38L);
      case 70:
         if ((active2 & 0x4L) != 0L)
            return jjStartNfaWithStates_0(1, 130, 173);
         break;
      case 71:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x4000000L, active2, 0L, active3, 0L, active4, 0L);
      case 72:
         return jjMoveStringLiteralDfa2_0(active0, 0xf000000000000000L, active1, 0x1L, active2, 0L, active3, 0L, active4, 0L);
      case 73:
         if ((active3 & 0x1L) != 0L)
            return jjStartNfaWithStates_0(1, 192, 173);
         return jjMoveStringLiteralDfa2_0(active0, 0x400000000000000L, active1, 0x7a000000000000L, active2, 0x3c000000000L, active3, 0x32000007008000L, active4, 0L);
      case 75:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x8000000L, active4, 0L);
      case 76:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x8080000000000002L, active2, 0L, active3, 0x30000000L, active4, 0x4L);
      case 77:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x18000000L, active2, 0L, active3, 0x40000002L, active4, 0L);
      case 78:
         if ((active2 & 0x8000000L) != 0L)
            return jjStartNfaWithStates_0(1, 155, 173);
         return jjMoveStringLiteralDfa2_0(active0, 0x20000000000000L, active1, 0L, active2, 0x38L, active3, 0L, active4, 0L);
      case 79:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x100000020003ffcL, active2, 0x7e1c03f0000001L, active3, 0x400000001f000cL, active4, 0L);
      case 80:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x40000000L, active2, 0x180000000000000L, active3, 0x1000000000000000L, active4, 0L);
      case 81:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x80000000L, active4, 0L);
      case 82:
         if ((active2 & 0x400000000000000L) != 0L)
         {
            jjmatchedKind = 186;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x1b000004000L, active2, 0x800200000000040L, active3, 0xb80000000000070L, active4, 0L);
      case 83:
         return jjMoveStringLiteralDfa2_0(active0, 0x3800000000000L, active1, 0x380000000L, active2, 0x7f80L, active3, 0x200000L, active4, 0L);
      case 84:
         return jjMoveStringLiteralDfa2_0(active0, 0x1c000000000000L, active1, 0x4000000000000L, active2, 0L, active3, 0x4001f00000000L, active4, 0x40L);
      case 85:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0L, active2, 0x8000L, active3, 0xfe000000100L, active4, 0L);
      case 86:
         if ((active1 & 0x200000000000000L) != 0L)
            return jjStartNfaWithStates_0(1, 121, 173);
         else if ((active3 & 0x80L) != 0L)
            return jjStartNfaWithStates_0(1, 199, 173);
         return jjMoveStringLiteralDfa2_0(active0, 0xc0000000000000L, active1, 0x80c00000000L, active2, 0L, active3, 0L, active4, 0L);
      case 88:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x160000000000L, active2, 0L, active3, 0L, active4, 0L);
      case 89:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0L, active2, 0x2L, active3, 0x100000000000L, active4, 0L);
      case 97:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x800000000000L, active2, 0L, active3, 0L, active4, 0x2000000L);
      case 101:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0x400005800L);
      case 102:
         if ((active4 & 0x8000L) != 0L)
            return jjStartNfaWithStates_0(1, 271, 174);
         break;
      case 104:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0x20200000L);
      case 105:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0x200800000L);
      case 108:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0x400000L);
      case 109:
         return jjMoveStringLiteralDfa2_0(active0, 0x60003000000L, active1, 0L, active2, 0L, active3, 0L, active4, 0x40000000L);
      case 110:
         if ((active4 & 0x100000L) != 0L)
         {
            jjmatchedKind = 276;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0x91000000L);
      case 111:
         if ((active4 & 0x100000000L) != 0L)
            return jjStartNfaWithStates_0(1, 288, 174);
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0x8030000L);
      case 112:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0x80000L);
      case 114:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x4000000000L, active2, 0L, active3, 0x400000000000000L, active4, 0L);
      case 115:
         if ((active4 & 0x4000000L) != 0L)
            return jjStartNfaWithStates_0(1, 282, 174);
         break;
      case 116:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0x40000L);
      case 117:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0x100L);
      default :
         break;
   }
   return jjStartNfa_0(0, active0, active1, active2, active3, active4);
}
private int jjMoveStringLiteralDfa2_0(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3, long old4, long active4)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3) | (active4 &= old4)) == 0L)
      return jjStartNfa_0(0, old0, old1, old2, old3, old4);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(1, active0, active1, active2, active3, active4);
      return 2;
   }
   switch(curChar)
   {
      case 65:
         return jjMoveStringLiteralDfa3_0(active0, 0x101c000000000000L, active1, 0x20c08000000L, active2, 0x1000000000000000L, active3, 0x140400100L, active4, 0x20L);
      case 66:
         if ((active1 & 0x800000L) != 0L)
            return jjStartNfaWithStates_0(2, 87, 173);
         else if ((active4 & 0x2L) != 0L)
            return jjStartNfaWithStates_0(2, 257, 173);
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0L, active2, 0x80L, active3, 0x2000000000L, active4, 0L);
      case 67:
         if ((active0 & 0x800000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 47, 173);
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x200000000000L, active2, 0L, active3, 0x800000L, active4, 0L);
      case 68:
         if ((active0 & 0x20000000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 53, 173);
         else if ((active2 & 0x4000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 166, 173);
         else if ((active2 & 0x40000000000L) != 0L)
         {
            jjmatchedKind = 170;
            jjmatchedPos = 2;
         }
         else if ((active2 & 0x200000000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 185, 173);
         else if ((active3 & 0x100000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 236, 173);
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x4L, active2, 0x82000000008L, active3, 0x40000e00000200L, active4, 0L);
      case 69:
         return jjMoveStringLiteralDfa3_0(active0, 0xc0000000000000L, active1, 0x4080004000002L, active2, 0x80001000000300L, active3, 0x4001008000000L, active4, 0x48L);
      case 70:
         if ((active1 & 0x1000000000L) != 0L)
         {
            jjmatchedKind = 100;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x2000000000L, active2, 0x20000L, active3, 0L, active4, 0L);
      case 71:
         if ((active2 & 0x10000000L) != 0L)
         {
            jjmatchedKind = 156;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x1000000L, active2, 0x8010000e1fc0000L, active3, 0x1008000L, active4, 0L);
      case 73:
         return jjMoveStringLiteralDfa3_0(active0, 0xe803000000000000L, active1, 0x1000010004000L, active2, 0L, active3, 0x181000000000004L, active4, 0x10L);
      case 76:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x400020000008L, active2, 0x400L, active3, 0x2000000000000000L, active4, 0L);
      case 77:
         if ((active3 & 0x4000000000L) != 0L)
         {
            jjmatchedKind = 230;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x1c00000000000010L, active2, 0L, active3, 0x300f8000010000L, active4, 0L);
      case 78:
         if ((active2 & 0x2000000L) != 0L)
         {
            jjmatchedKind = 153;
            jjmatchedPos = 2;
         }
         else if ((active2 & 0x8000000000L) != 0L)
         {
            jjmatchedKind = 167;
            jjmatchedPos = 2;
         }
         else if ((active3 & 0x2000000L) != 0L)
         {
            jjmatchedKind = 217;
            jjmatchedPos = 2;
         }
         else if ((active3 & 0x10000000L) != 0L)
            return jjStartNfaWithStates_0(2, 220, 173);
         else if ((active3 & 0x400000000000L) != 0L)
         {
            jjmatchedKind = 238;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0x400000000000000L, active1, 0xa000000000060L, active2, 0x110004003800L, active3, 0x2800004000c00L, active4, 0L);
      case 79:
         return jjMoveStringLiteralDfa3_0(active0, 0x600000000000L, active1, 0xa080000000600001L, active2, 0x200100000000L, active3, 0x20000070L, active4, 0x4L);
      case 80:
         if ((active1 & 0x100000000000L) != 0L)
         {
            jjmatchedKind = 108;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x40000000000L, active2, 0x2L, active3, 0x1000000000006000L, active4, 0L);
      case 81:
         if ((active3 & 0x200000L) != 0L)
            return jjStartNfaWithStates_0(2, 213, 173);
         break;
      case 82:
         if ((active2 & 0x40L) != 0L)
            return jjStartNfaWithStates_0(2, 134, 173);
         else if ((active3 & 0x4000000000000000L) != 0L)
         {
            jjmatchedKind = 254;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x4100018040000080L, active2, 0xe01e020000018000L, active3, 0x8000000080000000L, active4, 0x1L);
      case 83:
         if ((active0 & 0x100000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 44, 173);
         else if ((active1 & 0x100L) != 0L)
         {
            jjmatchedKind = 72;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x30000000000200L, active2, 0L, active3, 0L, active4, 0L);
      case 84:
         if ((active2 & 0x10L) != 0L)
         {
            jjmatchedKind = 132;
            jjmatchedPos = 2;
         }
         else if ((active2 & 0x20000000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 181, 173);
         else if ((active3 & 0x2L) != 0L)
            return jjStartNfaWithStates_0(2, 193, 173);
         return jjMoveStringLiteralDfa3_0(active0, 0x300000000000000L, active1, 0x180018000L, active2, 0x800004020L, active3, 0x1000L, active4, 0L);
      case 85:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x200001c00L, active2, 0x1L, active3, 0xa000000000e0000L, active4, 0L);
      case 86:
         if ((active2 & 0x100000000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 184, 173);
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x2022000L, active2, 0L, active3, 0L, active4, 0L);
      case 87:
         if ((active2 & 0x40000000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 182, 173);
         else if ((active3 & 0x100000L) != 0L)
            return jjStartNfaWithStates_0(2, 212, 173);
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0L, active2, 0x200000000L, active3, 0x8L, active4, 0L);
      case 88:
         if ((active2 & 0x400000000L) != 0L)
            return jjStartNfaWithStates_0(2, 162, 173);
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x40000000000000L, active2, 0L, active3, 0x8000000000000L, active4, 0L);
      case 89:
         if ((active1 & 0x40000L) != 0L)
         {
            jjmatchedKind = 82;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x80000L, active2, 0L, active3, 0L, active4, 0L);
      case 97:
         return jjMoveStringLiteralDfa3_0(active0, 0x40002000000L, active1, 0L, active2, 0L, active3, 0L, active4, 0L);
      case 99:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0x402000000L);
      case 100:
         if ((active4 & 0x80000000L) != 0L)
            return jjStartNfaWithStates_0(2, 287, 174);
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0x1000000L);
      case 101:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0x20240000L);
      case 102:
         if ((active4 & 0x1000L) != 0L)
            return jjStartNfaWithStates_0(2, 268, 174);
         break;
      case 105:
         return jjMoveStringLiteralDfa3_0(active0, 0x20001000000L, active1, 0L, active2, 0L, active3, 0L, active4, 0L);
      case 108:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x800000000000L, active2, 0L, active3, 0L, active4, 0x30100L);
      case 112:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0x40080000L);
      case 114:
         if ((active1 & 0x4000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 102, 174);
         break;
      case 115:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0x200400000L);
      case 116:
         if ((active4 & 0x4000L) != 0L)
            return jjStartNfaWithStates_0(2, 270, 174);
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0x10800000L);
      case 117:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x400000000000000L, active4, 0x8000000L);
      case 119:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0x800L);
      default :
         break;
   }
   return jjStartNfa_0(1, active0, active1, active2, active3, active4);
}
private int jjMoveStringLiteralDfa3_0(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3, long old4, long active4)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3) | (active4 &= old4)) == 0L)
      return jjStartNfa_0(1, old0, old1, old2, old3, old4);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(2, active0, active1, active2, active3, active4);
      return 3;
   }
   switch(curChar)
   {
      case 46:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0L, active2, 0x800000000000000L, active3, 0L, active4, 0L);
      case 49:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0L, active2, 0x20000000L, active3, 0L, active4, 0L);
      case 65:
         if ((active2 & 0x800L) != 0L)
            return jjStartNfaWithStates_0(3, 139, 173);
         else if ((active3 & 0x8000000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 255, 173);
         return jjMoveStringLiteralDfa4_0(active0, 0x300000000000000L, active1, 0x2002L, active2, 0x1fc0000L, active3, 0x40000000010000L, active4, 0L);
      case 66:
         if ((active2 & 0x4000000L) != 0L)
            return jjStartNfaWithStates_0(3, 154, 173);
         else if ((active3 & 0x10L) != 0L)
            return jjStartNfaWithStates_0(3, 196, 173);
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x10L, active2, 0x1000000000000L, active3, 0L, active4, 0x10L);
      case 67:
         if ((active1 & 0x2000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 101, 173);
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x20000000020L, active2, 0xc000000800000000L, active3, 0L, active4, 0L);
      case 68:
         if ((active1 & 0x8000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 115, 173);
         else if ((active3 & 0x400L) != 0L)
            return jjStartNfaWithStates_0(3, 202, 173);
         return jjMoveStringLiteralDfa4_0(active0, 0x2040000000000000L, active1, 0x180000000L, active2, 0L, active3, 0x20L, active4, 0L);
      case 69:
         if ((active1 & 0x4L) != 0L)
            return jjStartNfaWithStates_0(3, 66, 173);
         else if ((active1 & 0x8000L) != 0L)
         {
            jjmatchedKind = 79;
            jjmatchedPos = 3;
         }
         else if ((active2 & 0x80000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 171, 173);
         else if ((active3 & 0x1000L) != 0L)
            return jjStartNfaWithStates_0(3, 204, 173);
         else if ((active3 & 0x10000000000000L) != 0L)
         {
            jjmatchedKind = 244;
            jjmatchedPos = 3;
         }
         else if ((active3 & 0x200000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 249, 173);
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x140000000030000L, active2, 0x200004028L, active3, 0x1020000e00000008L, active4, 0L);
      case 70:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x40L, active2, 0L, active3, 0L, active4, 0L);
      case 71:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0L, active2, 0x10002L, active3, 0L, active4, 0L);
      case 72:
         if ((active1 & 0x200L) != 0L)
            return jjStartNfaWithStates_0(3, 73, 173);
         else if ((active3 & 0x4000000L) != 0L)
            return jjStartNfaWithStates_0(3, 218, 173);
         else if ((active3 & 0x800000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 239, 173);
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x30000000000000L, active2, 0L, active3, 0x8000L, active4, 0L);
      case 73:
         return jjMoveStringLiteralDfa4_0(active0, 0x4000000000000000L, active1, 0L, active2, 0x2040000000L, active3, 0x8000000200L, active4, 0L);
      case 75:
         if ((active3 & 0x800L) != 0L)
            return jjStartNfaWithStates_0(3, 203, 173);
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0L, active2, 0x100000000L, active3, 0L, active4, 0x8L);
      case 76:
         return jjMoveStringLiteralDfa4_0(active0, 0x800000000000000L, active1, 0x20000000L, active2, 0x80L, active3, 0x40002000L, active4, 0L);
      case 77:
         if ((active1 & 0x200000000L) != 0L)
            return jjStartNfaWithStates_0(3, 97, 173);
         else if ((active3 & 0x80000000000000L) != 0L)
         {
            jjmatchedKind = 247;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x7c00000000000000L, active2, 0x201e000000000000L, active3, 0x100000000000000L, active4, 0L);
      case 78:
         if ((active0 & 0x1000000000000L) != 0L)
         {
            jjmatchedKind = 48;
            jjmatchedPos = 3;
         }
         else if ((active0 & 0x4000000000000L) != 0L)
         {
            jjmatchedKind = 50;
            jjmatchedPos = 3;
         }
         else if ((active1 & 0x10000000L) != 0L)
            return jjStartNfaWithStates_0(3, 92, 173);
         else if ((active1 & 0x80000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 107, 173);
         else if ((active3 & 0x1000000L) != 0L)
            return jjStartNfaWithStates_0(3, 216, 173);
         return jjMoveStringLiteralDfa4_0(active0, 0x1a000000000000L, active1, 0x1c00L, active2, 0x80000000L, active3, 0x8000001000e0000L, active4, 0L);
      case 79:
         return jjMoveStringLiteralDfa4_0(active0, 0x400000000000000L, active1, 0x8080058040000001L, active2, 0x1400L, active3, 0x800000L, active4, 0x4L);
      case 80:
         if ((active4 & 0x1L) != 0L)
            return jjStartNfaWithStates_0(3, 256, 173);
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x20000040L, active4, 0L);
      case 82:
         if ((active0 & 0x1000000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 60, 173);
         else if ((active1 & 0x400000000L) != 0L)
         {
            jjmatchedKind = 98;
            jjmatchedPos = 3;
         }
         else if ((active2 & 0x1L) != 0L)
            return jjStartNfaWithStates_0(3, 128, 173);
         else if ((active2 & 0x20000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 169, 173);
         else if ((active2 & 0x80000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 183, 173);
         else if ((active4 & 0x20L) != 0L)
            return jjStartNfaWithStates_0(3, 261, 173);
         return jjMoveStringLiteralDfa4_0(active0, 0x80000000000000L, active1, 0x801000080L, active2, 0x1000000000000300L, active3, 0x400100L, active4, 0L);
      case 83:
         if ((active0 & 0x200000000000L) != 0L)
         {
            jjmatchedKind = 45;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0x400000000000L, active1, 0x5400002080000L, active2, 0L, active3, 0x5012000000004L, active4, 0x40L);
      case 84:
         if ((active1 & 0x4000000L) != 0L)
            return jjStartNfaWithStates_0(3, 90, 173);
         else if ((active1 & 0x200000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 109, 173);
         else if ((active2 & 0x8000L) != 0L)
            return jjStartNfaWithStates_0(3, 143, 173);
         else if ((active2 & 0x20000L) != 0L)
            return jjStartNfaWithStates_0(3, 145, 173);
         else if ((active3 & 0x4000L) != 0L)
            return jjStartNfaWithStates_0(3, 206, 173);
         else if ((active3 & 0x80000000L) != 0L)
            return jjStartNfaWithStates_0(3, 223, 173);
         else if ((active3 & 0x8000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 243, 173);
         return jjMoveStringLiteralDfa4_0(active0, 0x8000000000000000L, active1, 0x4000L, active2, 0x101000000000L, active3, 0L, active4, 0L);
      case 85:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x600008L, active2, 0x210000002000L, active3, 0x2000000000000000L, active4, 0L);
      case 86:
         if ((active1 & 0x2000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 113, 173);
         else if ((active3 & 0x2000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 241, 173);
         break;
      case 87:
         if ((active3 & 0x8000000L) != 0L)
            return jjStartNfaWithStates_0(3, 219, 173);
         break;
      case 88:
         if ((active1 & 0x8000000L) != 0L)
            return jjStartNfaWithStates_0(3, 91, 173);
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0L, active2, 0L, active3, 0xe0000000000L, active4, 0L);
      case 89:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x1000000000L, active4, 0L);
      case 100:
         if ((active4 & 0x10000L) != 0L)
         {
            jjmatchedKind = 272;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0x20000L);
      case 101:
         if ((active3 & 0x400000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 250, 174);
         else if ((active4 & 0x400000L) != 0L)
            return jjStartNfaWithStates_0(3, 278, 174);
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0x1000100L);
      case 104:
         if ((active4 & 0x800000L) != 0L)
            return jjStartNfaWithStates_0(3, 279, 174);
         else if ((active4 & 0x2000000L) != 0L)
            return jjStartNfaWithStates_0(3, 281, 174);
         break;
      case 108:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0x80000L);
      case 110:
         if ((active4 & 0x200000L) != 0L)
            return jjStartNfaWithStates_0(3, 277, 174);
         else if ((active4 & 0x20000000L) != 0L)
            return jjStartNfaWithStates_0(3, 285, 174);
         return jjMoveStringLiteralDfa4_0(active0, 0x20001000000L, active1, 0L, active2, 0L, active3, 0L, active4, 0x8000000L);
      case 111:
         if ((active4 & 0x10000000L) != 0L)
            return jjStartNfaWithStates_0(3, 284, 174);
         break;
      case 114:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0x40800L);
      case 115:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x800000000000L, active2, 0L, active3, 0L, active4, 0L);
      case 116:
         if ((active4 & 0x200000000L) != 0L)
            return jjStartNfaWithStates_0(3, 289, 174);
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0x440000000L);
      case 120:
         return jjMoveStringLiteralDfa4_0(active0, 0x40002000000L, active1, 0L, active2, 0L, active3, 0L, active4, 0L);
      default :
         break;
   }
   return jjStartNfa_0(2, active0, active1, active2, active3, active4);
}
private int jjMoveStringLiteralDfa4_0(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3, long old4, long active4)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3) | (active4 &= old4)) == 0L)
      return jjStartNfa_0(2, old0, old1, old2, old3, old4);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(3, active0, active1, active2, active3, active4);
      return 4;
   }
   switch(curChar)
   {
      case 47:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0x20000L);
      case 48:
         if ((active2 & 0x20000000L) != 0L)
            return jjStartNfaWithStates_0(4, 157, 175);
         break;
      case 50:
         if ((active0 & 0x10000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 52, 175);
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x60000000000L, active4, 0L);
      case 51:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x80000L, active2, 0L, active3, 0L, active4, 0L);
      case 65:
         return jjMoveStringLiteralDfa5_0(active0, 0x80000000000000L, active1, 0x1c00000020000020L, active2, 0x2000000080L, active3, 0x2200L, active4, 0L);
      case 66:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x4000L, active2, 0L, active3, 0L, active4, 0L);
      case 67:
         if ((active3 & 0x800000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 251, 173);
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x100000000000000L, active2, 0x1fc0000L, active3, 0x400000L, active4, 0L);
      case 68:
         if ((active1 & 0x40000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 118, 173);
         else if ((active3 & 0x20000L) != 0L)
         {
            jjmatchedKind = 209;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active0, 0x100000000000000L, active1, 0x40000000L, active2, 0x2000000000000L, active3, 0x1000c0000L, active4, 0x8L);
      case 69:
         if ((active1 & 0x400000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 110, 173);
         else if ((active2 & 0x10000L) != 0L)
            return jjStartNfaWithStates_0(4, 144, 173);
         else if ((active3 & 0x20000000L) != 0L)
            return jjStartNfaWithStates_0(4, 221, 173);
         else if ((active3 & 0x2000000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 253, 173);
         return jjMoveStringLiteralDfa5_0(active0, 0x8040000000000000L, active1, 0x6030000181000080L, active2, 0xc000001000000002L, active3, 0x40L, active4, 0L);
      case 70:
         if ((active3 & 0x8000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 231, 173);
         break;
      case 71:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0L, active2, 0x400L, active3, 0L, active4, 0L);
      case 72:
         if ((active0 & 0x400000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 46, 173);
         else if ((active0 & 0x2000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 49, 173);
         else if ((active0 & 0x8000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 51, 173);
         else if ((active2 & 0x800000000L) != 0L)
            return jjStartNfaWithStates_0(4, 163, 173);
         else if ((active2 & 0x100000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 172, 173);
         break;
      case 73:
         return jjMoveStringLiteralDfa5_0(active0, 0x2a00000000000000L, active1, 0x50L, active2, 0x5000000000000L, active3, 0L, active4, 0L);
      case 75:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x8000000000000000L, active2, 0L, active3, 0L, active4, 0x4L);
      case 76:
         if ((active3 & 0x40000000L) != 0L)
            return jjStartNfaWithStates_0(4, 222, 173);
         break;
      case 77:
         return jjMoveStringLiteralDfa5_0(active0, 0x400000000000000L, active1, 0x8L, active2, 0x2000L, active3, 0x100080000000000L, active4, 0L);
      case 78:
         if ((active1 & 0x2L) != 0L)
            return jjStartNfaWithStates_0(4, 65, 173);
         else if ((active3 & 0x10000L) != 0L)
            return jjStartNfaWithStates_0(4, 208, 173);
         return jjMoveStringLiteralDfa5_0(active0, 0x4000000000000000L, active1, 0x40000600000L, active2, 0x200040001000L, active3, 0x800000L, active4, 0L);
      case 79:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0L, active2, 0x800000080000000L, active3, 0L, active4, 0L);
      case 80:
         if ((active1 & 0x800000000L) != 0L)
            return jjStartNfaWithStates_0(4, 99, 173);
         break;
      case 81:
         if ((active1 & 0x2000000L) != 0L)
            return jjStartNfaWithStates_0(4, 89, 173);
         else if ((active3 & 0x10000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 232, 173);
         break;
      case 82:
         if ((active1 & 0x2000L) != 0L)
            return jjStartNfaWithStates_0(4, 77, 173);
         else if ((active1 & 0x80000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 119, 173);
         else if ((active2 & 0x100L) != 0L)
         {
            jjmatchedKind = 136;
            jjmatchedPos = 4;
         }
         else if ((active2 & 0x200000000L) != 0L)
            return jjStartNfaWithStates_0(4, 161, 173);
         else if ((active3 & 0x8L) != 0L)
            return jjStartNfaWithStates_0(4, 195, 173);
         else if ((active3 & 0x1000000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 252, 173);
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x18000020000L, active2, 0x220L, active3, 0L, active4, 0L);
      case 83:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x1L, active2, 0x1018000000000000L, active3, 0x4L, active4, 0L);
      case 84:
         if ((active1 & 0x400L) != 0L)
         {
            jjmatchedKind = 74;
            jjmatchedPos = 4;
         }
         else if ((active1 & 0x20000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 105, 173);
         else if ((active1 & 0x1000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 112, 173);
         else if ((active1 & 0x4000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 114, 173);
         else if ((active3 & 0x8000L) != 0L)
            return jjStartNfaWithStates_0(4, 207, 173);
         else if ((active3 & 0x1000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 240, 173);
         else if ((active3 & 0x4000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 242, 173);
         else if ((active4 & 0x40L) != 0L)
            return jjStartNfaWithStates_0(4, 262, 173);
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x1800L, active2, 0x10000000000L, active3, 0x2000000100L, active4, 0L);
      case 85:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0L, active2, 0x2000000100000000L, active3, 0x20L, active4, 0x10L);
      case 86:
         if ((active3 & 0x200000000L) != 0L)
         {
            jjmatchedKind = 225;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x10000L, active2, 0L, active3, 0x20000c00000000L, active4, 0L);
      case 88:
         if ((active2 & 0x8L) != 0L)
            return jjStartNfaWithStates_0(4, 131, 173);
         else if ((active3 & 0x1000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 228, 173);
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0L, active2, 0x4000L, active3, 0L, active4, 0L);
      case 89:
         if ((active3 & 0x40000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 246, 173);
         break;
      case 95:
         if ((active0 & 0x1000000L) != 0L)
            return jjStartNfaWithStates_0(4, 24, 174);
         else if ((active0 & 0x2000000L) != 0L)
            return jjStartNfaWithStates_0(4, 25, 174);
         break;
      case 97:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0x40000L);
      case 101:
         if ((active1 & 0x800000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 111, 174);
         break;
      case 105:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0x800L);
      case 111:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0x400000000L);
      case 115:
         if ((active4 & 0x100L) != 0L)
            return jjStartNfaWithStates_0(4, 264, 174);
         break;
      case 116:
         if ((active4 & 0x8000000L) != 0L)
            return jjStartNfaWithStates_0(4, 283, 174);
         break;
      case 118:
         return jjMoveStringLiteralDfa5_0(active0, 0x60000000000L, active1, 0L, active2, 0L, active3, 0L, active4, 0L);
      case 120:
         if ((active4 & 0x1000000L) != 0L)
            return jjStartNfaWithStates_0(4, 280, 174);
         break;
      case 121:
         if ((active4 & 0x80000L) != 0L)
            return jjStartNfaWithStates_0(4, 275, 174);
         else if ((active4 & 0x40000000L) != 0L)
            return jjStartNfaWithStates_0(4, 286, 174);
         break;
      default :
         break;
   }
   return jjStartNfa_0(3, active0, active1, active2, active3, active4);
}
private int jjMoveStringLiteralDfa5_0(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3, long old4, long active4)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3) | (active4 &= old4)) == 0L)
      return jjStartNfa_0(3, old0, old1, old2, old3, old4);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(4, active0, active1, active2, active3, active4);
      return 5;
   }
   switch(curChar)
   {
      case 46:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x8000000000L, active2, 0L, active3, 0L, active4, 0L);
      case 54:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x80000L, active2, 0L, active3, 0L, active4, 0L);
      case 65:
         if ((active1 & 0x800L) != 0L)
            return jjStartNfaWithStates_0(5, 75, 173);
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x6100000000030000L, active2, 0L, active3, 0x20000100000000L, active4, 0x8L);
      case 66:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0L, active2, 0x2000L, active3, 0L, active4, 0L);
      case 67:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0L, active2, 0x20L, active3, 0x2020L, active4, 0L);
      case 68:
         if ((active2 & 0x200000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 173, 173);
         else if ((active3 & 0x800000L) != 0L)
            return jjStartNfaWithStates_0(5, 215, 173);
         return jjMoveStringLiteralDfa6_0(active0, 0x400000000000000L, active1, 0x400040000000040L, active2, 0x8000000000000L, active3, 0x40000L, active4, 0L);
      case 69:
         if ((active1 & 0x1L) != 0L)
            return jjStartNfaWithStates_0(5, 64, 173);
         else if ((active2 & 0x10000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 168, 173);
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x1000000L, active2, 0L, active3, 0x100000000000000L, active4, 0L);
      case 71:
         return jjMoveStringLiteralDfa6_0(active0, 0x80000000000000L, active1, 0L, active2, 0L, active3, 0L, active4, 0L);
      case 72:
         if ((active3 & 0x400000L) != 0L)
            return jjStartNfaWithStates_0(5, 214, 173);
         break;
      case 73:
         return jjMoveStringLiteralDfa6_0(active0, 0x100000000000000L, active1, 0x800000000005000L, active2, 0x12000000000400L, active3, 0x2000000100L, active4, 0L);
      case 76:
         if ((active1 & 0x80L) != 0L)
            return jjStartNfaWithStates_0(5, 71, 173);
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x1000000000000000L, active2, 0L, active3, 0L, active4, 0x10L);
      case 77:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x20000000000L, active4, 0L);
      case 78:
         if ((active1 & 0x8L) != 0L)
            return jjStartNfaWithStates_0(5, 67, 173);
         else if ((active1 & 0x10L) != 0L)
            return jjStartNfaWithStates_0(5, 68, 173);
         else if ((active2 & 0x2000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 165, 173);
         return jjMoveStringLiteralDfa6_0(active0, 0xa00000000000000L, active1, 0L, active2, 0xc005000000000080L, active3, 0x200L, active4, 0L);
      case 79:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0L, active2, 0x1000000000000202L, active3, 0x4L, active4, 0L);
      case 80:
         if ((active2 & 0x100000000L) != 0L)
            return jjStartNfaWithStates_0(5, 160, 173);
         else if ((active3 & 0x400000000L) != 0L)
         {
            jjmatchedKind = 226;
            jjmatchedPos = 5;
         }
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0L, active2, 0x800000000000000L, active3, 0x40800000000L, active4, 0L);
      case 82:
         if ((active1 & 0x20000000L) != 0L)
            return jjStartNfaWithStates_0(5, 93, 173);
         else if ((active1 & 0x10000000000000L) != 0L)
         {
            jjmatchedKind = 116;
            jjmatchedPos = 5;
         }
         else if ((active3 & 0x40L) != 0L)
            return jjStartNfaWithStates_0(5, 198, 173);
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x20000000000000L, active2, 0x1080000000L, active3, 0L, active4, 0L);
      case 83:
         return jjMoveStringLiteralDfa6_0(active0, 0xa000000000000000L, active1, 0L, active2, 0L, active3, 0L, active4, 0L);
      case 84:
         if ((active1 & 0x200000L) != 0L)
         {
            jjmatchedKind = 85;
            jjmatchedPos = 5;
         }
         else if ((active2 & 0x4000L) != 0L)
            return jjStartNfaWithStates_0(5, 142, 173);
         else if ((active2 & 0x2000000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 189, 173);
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x10000400020L, active2, 0x1000L, active3, 0L, active4, 0L);
      case 85:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x8000000040000000L, active2, 0L, active3, 0x80000L, active4, 0x4L);
      case 86:
         if ((active0 & 0x40000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 54, 173);
         else if ((active0 & 0x4000000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 62, 173);
         else if ((active1 & 0x80000000L) != 0L)
         {
            jjmatchedKind = 95;
            jjmatchedPos = 5;
         }
         else if ((active2 & 0x40000000L) != 0L)
            return jjStartNfaWithStates_0(5, 158, 173);
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x100000000L, active2, 0L, active3, 0L, active4, 0L);
      case 89:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0L, active2, 0x1fc0000L, active3, 0x80000000000L, active4, 0L);
      case 97:
         return jjMoveStringLiteralDfa6_0(active0, 0x60000000000L, active1, 0L, active2, 0L, active3, 0L, active4, 0L);
      case 114:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0x400020000L);
      case 116:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0x40800L);
      default :
         break;
   }
   return jjStartNfa_0(4, active0, active1, active2, active3, active4);
}
private int jjMoveStringLiteralDfa6_0(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3, long old4, long active4)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3) | (active4 &= old4)) == 0L)
      return jjStartNfa_0(4, old0, old1, old2, old3, old4);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(5, active0, active1, active2, active3, active4);
      return 6;
   }
   switch(curChar)
   {
      case 46:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0L, active2, 0x1fc0000L, active3, 0L, active4, 0L);
      case 48:
         if ((active1 & 0x80000L) != 0L)
            return jjStartNfaWithStates_0(6, 83, 175);
         break;
      case 50:
         if ((active3 & 0x80000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 235, 175);
         break;
      case 65:
         if ((active1 & 0x400000L) != 0L)
            return jjStartNfaWithStates_0(6, 86, 173);
         else if ((active3 & 0x800000000L) != 0L)
            return jjStartNfaWithStates_0(6, 227, 173);
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x100000000000000L, active4, 0L);
      case 67:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x40000000L, active2, 0x400L, active3, 0L, active4, 0L);
      case 69:
         if ((active0 & 0x80000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 55, 173);
         else if ((active3 & 0x2000L) != 0L)
            return jjStartNfaWithStates_0(6, 205, 173);
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x60L, active2, 0x800000000003020L, active3, 0L, active4, 0L);
      case 70:
         if ((active1 & 0x1000L) != 0L)
            return jjStartNfaWithStates_0(6, 76, 173);
         break;
      case 71:
         if ((active0 & 0x800000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 59, 173);
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x20000L, active2, 0L, active3, 0L, active4, 0L);
      case 73:
         return jjMoveStringLiteralDfa7_0(active0, 0x400000000000000L, active1, 0x420040000000000L, active2, 0x8000000000000L, active3, 0L, active4, 0L);
      case 75:
         if ((active2 & 0x80L) != 0L)
            return jjStartNfaWithStates_0(6, 135, 173);
         break;
      case 76:
         if ((active4 & 0x10L) != 0L)
            return jjStartNfaWithStates_0(6, 260, 173);
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x10000L, active2, 0L, active3, 0x20000000000100L, active4, 0L);
      case 77:
         if ((active2 & 0x1000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 164, 173);
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0L, active2, 0x80000002L, active3, 0L, active4, 0L);
      case 78:
         if ((active1 & 0x1000000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 124, 173);
         else if ((active1 & 0x2000000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 125, 173);
         else if ((active1 & 0x4000000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 126, 173);
         else if ((active2 & 0x1000000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 188, 173);
         else if ((active3 & 0x4L) != 0L)
            return jjStartNfaWithStates_0(6, 194, 173);
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x800000000004000L, active2, 0x10000000000000L, active3, 0L, active4, 0L);
      case 79:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0L, active2, 0x1000000000000L, active3, 0x40000L, active4, 0L);
      case 80:
         if ((active1 & 0x100000000L) != 0L)
            return jjStartNfaWithStates_0(6, 96, 173);
         else if ((active1 & 0x8000000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 127, 173);
         else if ((active3 & 0x80000L) != 0L)
            return jjStartNfaWithStates_0(6, 211, 173);
         else if ((active4 & 0x4L) != 0L)
            return jjStartNfaWithStates_0(6, 258, 173);
         break;
      case 82:
         if ((active2 & 0x200L) != 0L)
            return jjStartNfaWithStates_0(6, 137, 173);
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x100000000L, active4, 0L);
      case 83:
         if ((active1 & 0x1000000L) != 0L)
            return jjStartNfaWithStates_0(6, 88, 173);
         else if ((active3 & 0x200L) != 0L)
            return jjStartNfaWithStates_0(6, 201, 173);
         return jjMoveStringLiteralDfa7_0(active0, 0x100000000000000L, active1, 0x100000000000000L, active2, 0x2000000000000L, active3, 0L, active4, 0L);
      case 84:
         if ((active0 & 0x2000000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 61, 173);
         else if ((active0 & 0x8000000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 63, 173);
         else if ((active3 & 0x20L) != 0L)
            return jjStartNfaWithStates_0(6, 197, 173);
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x8000000000L, active2, 0xc000000000000000L, active3, 0x2000000000L, active4, 0L);
      case 86:
         if ((active0 & 0x200000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 57, 173);
         else if ((active2 & 0x4000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 178, 173);
         break;
      case 89:
         if ((active4 & 0x8L) != 0L)
            return jjStartNfaWithStates_0(6, 259, 173);
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x10000000000L, active2, 0L, active3, 0x60000000000L, active4, 0L);
      case 101:
         if ((active4 & 0x800L) != 0L)
            return jjStartNfaWithStates_0(6, 267, 174);
         else if ((active4 & 0x40000L) != 0L)
            return jjStartNfaWithStates_0(6, 274, 174);
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0x20000L);
      case 108:
         return jjMoveStringLiteralDfa7_0(active0, 0x60000000000L, active1, 0L, active2, 0L, active3, 0L, active4, 0L);
      case 115:
         if ((active4 & 0x400000000L) != 0L)
            return jjStartNfaWithStates_0(6, 290, 174);
         break;
      default :
         break;
   }
   return jjStartNfa_0(5, active0, active1, active2, active3, active4);
}
private int jjMoveStringLiteralDfa7_0(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3, long old4, long active4)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3) | (active4 &= old4)) == 0L)
      return jjStartNfa_0(5, old0, old1, old2, old3, old4);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(6, active0, active1, active2, active3, active4);
      return 7;
   }
   switch(curChar)
   {
      case 50:
         if ((active3 & 0x20000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 233, 174);
         else if ((active3 & 0x40000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 234, 174);
         break;
      case 65:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0L, active2, 0x400L, active3, 0L, active4, 0L);
      case 67:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0L, active2, 0x1c0000L, active3, 0L, active4, 0L);
      case 68:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0L, active2, 0x80000002L, active3, 0x100000000L, active4, 0L);
      case 69:
         if ((active1 & 0x20000L) != 0L)
            return jjStartNfaWithStates_0(7, 81, 173);
         else if ((active3 & 0x100L) != 0L)
            return jjStartNfaWithStates_0(7, 200, 173);
         break;
      case 70:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0L, active2, 0x600000L, active3, 0L, active4, 0L);
      case 73:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0L, active2, 0x4000000000000000L, active3, 0L, active4, 0L);
      case 77:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0L, active2, 0x1000000000000L, active3, 0L, active4, 0L);
      case 78:
         if ((active3 & 0x100000000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 248, 173);
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x20000000000060L, active2, 0x800000001800000L, active3, 0L, active4, 0L);
      case 79:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x4000L, active2, 0L, active3, 0L, active4, 0L);
      case 80:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x10000000000L, active2, 0x20L, active3, 0L, active4, 0L);
      case 82:
         if ((active2 & 0x2000L) != 0L)
            return jjStartNfaWithStates_0(7, 141, 173);
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0L, active2, 0x8000000000000000L, active3, 0L, active4, 0L);
      case 83:
         return jjMoveStringLiteralDfa8_0(active0, 0x400000000000000L, active1, 0x400040000000000L, active2, 0x8000000000000L, active3, 0L, active4, 0L);
      case 84:
         if ((active0 & 0x100000000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 56, 173);
         else if ((active1 & 0x40000000L) != 0L)
            return jjStartNfaWithStates_0(7, 94, 173);
         else if ((active1 & 0x100000000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 120, 173);
         else if ((active2 & 0x2000000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 177, 173);
         break;
      case 85:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x10000L, active2, 0L, active3, 0x20002000000000L, active4, 0L);
      case 86:
         if ((active1 & 0x800000000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 123, 173);
         else if ((active2 & 0x10000000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 180, 173);
         break;
      case 87:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x40000L, active4, 0L);
      case 88:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0L, active2, 0x1000L, active3, 0L, active4, 0L);
      case 89:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x8000000000L, active2, 0L, active3, 0L, active4, 0L);
      case 100:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0x20000L);
      case 117:
         return jjMoveStringLiteralDfa8_0(active0, 0x60000000000L, active1, 0L, active2, 0L, active3, 0L, active4, 0L);
      default :
         break;
   }
   return jjStartNfa_0(6, active0, active1, active2, active3, active4);
}
private int jjMoveStringLiteralDfa8_0(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3, long old4, long active4)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3) | (active4 &= old4)) == 0L)
      return jjStartNfa_0(6, old0, old1, old2, old3, old4);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(7, active0, active1, active2, active3, active4);
      return 8;
   }
   switch(curChar)
   {
      case 65:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x20L, active2, 0x8000000000000000L, active3, 0L, active4, 0L);
      case 67:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x40L, active2, 0L, active3, 0L, active4, 0L);
      case 68:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0L, active2, 0x1000000200000L, active3, 0L, active4, 0L);
      case 69:
         if ((active1 & 0x10000L) != 0L)
            return jjStartNfaWithStates_0(8, 80, 173);
         else if ((active1 & 0x10000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 104, 173);
         else if ((active3 & 0x20000000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 245, 173);
         break;
      case 72:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0L, active2, 0x1c0000L, active3, 0L, active4, 0L);
      case 73:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0L, active2, 0x80400002L, active3, 0x100000000L, active4, 0L);
      case 76:
         if ((active2 & 0x400L) != 0L)
            return jjStartNfaWithStates_0(8, 138, 173);
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0L, active2, 0x4000000000000000L, active3, 0L, active4, 0L);
      case 77:
         if ((active1 & 0x4000L) != 0L)
            return jjStartNfaWithStates_0(8, 78, 173);
         break;
      case 78:
         if ((active3 & 0x40000L) != 0L)
            return jjStartNfaWithStates_0(8, 210, 173);
         break;
      case 79:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0L, active2, 0x800000001800000L, active3, 0L, active4, 0L);
      case 80:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x8000000000L, active2, 0L, active3, 0L, active4, 0L);
      case 84:
         if ((active0 & 0x400000000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 58, 173);
         else if ((active1 & 0x40000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 106, 173);
         else if ((active1 & 0x400000000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 122, 173);
         else if ((active2 & 0x20L) != 0L)
            return jjStartNfaWithStates_0(8, 133, 173);
         else if ((active2 & 0x1000L) != 0L)
            return jjStartNfaWithStates_0(8, 140, 173);
         else if ((active2 & 0x8000000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 179, 173);
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x2000000000L, active4, 0L);
      case 86:
         if ((active1 & 0x20000000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 117, 173);
         break;
      case 101:
         if ((active0 & 0x20000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 41, 174);
         else if ((active0 & 0x40000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 42, 174);
         break;
      case 117:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0x20000L);
      default :
         break;
   }
   return jjStartNfa_0(7, active0, active1, active2, active3, active4);
}
private int jjMoveStringLiteralDfa9_0(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3, long old4, long active4)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3) | (active4 &= old4)) == 0L)
      return jjStartNfa_0(7, old0, old1, old2, old3, old4);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(8, 0L, active1, active2, active3, active4);
      return 9;
   }
   switch(curChar)
   {
      case 69:
         if ((active1 & 0x40L) != 0L)
            return jjStartNfaWithStates_0(9, 70, 173);
         else if ((active1 & 0x8000000000L) != 0L)
            return jjStartNfaWithStates_0(9, 103, 174);
         else if ((active2 & 0x4000000000000000L) != 0L)
            return jjStartNfaWithStates_0(9, 190, 173);
         else if ((active3 & 0x2000000000L) != 0L)
            return jjStartNfaWithStates_0(9, 229, 173);
         break;
      case 70:
         return jjMoveStringLiteralDfa10_0(active1, 0L, active2, 0x800000000000000L, active3, 0L, active4, 0L);
      case 73:
         return jjMoveStringLiteralDfa10_0(active1, 0L, active2, 0x10000003c0000L, active3, 0L, active4, 0L);
      case 78:
         return jjMoveStringLiteralDfa10_0(active1, 0L, active2, 0x8000000000400000L, active3, 0L, active4, 0L);
      case 82:
         return jjMoveStringLiteralDfa10_0(active1, 0L, active2, 0x1800000L, active3, 0L, active4, 0L);
      case 83:
         return jjMoveStringLiteralDfa10_0(active1, 0L, active2, 0x80000002L, active3, 0L, active4, 0L);
      case 84:
         return jjMoveStringLiteralDfa10_0(active1, 0x20L, active2, 0L, active3, 0L, active4, 0L);
      case 90:
         return jjMoveStringLiteralDfa10_0(active1, 0L, active2, 0L, active3, 0x100000000L, active4, 0L);
      case 99:
         return jjMoveStringLiteralDfa10_0(active1, 0L, active2, 0L, active3, 0L, active4, 0x20000L);
      default :
         break;
   }
   return jjStartNfa_0(8, 0L, active1, active2, active3, active4);
}
private int jjMoveStringLiteralDfa10_0(long old1, long active1, long old2, long active2, long old3, long active3, long old4, long active4)
{
   if (((active1 &= old1) | (active2 &= old2) | (active3 &= old3) | (active4 &= old4)) == 0L)
      return jjStartNfa_0(8, 0L, old1, old2, old3, old4);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(9, 0L, active1, active2, active3, active4);
      return 10;
   }
   switch(curChar)
   {
      case 68:
         return jjMoveStringLiteralDfa11_0(active1, 0L, active2, 0x40000L, active3, 0L, active4, 0L);
      case 69:
         if ((active1 & 0x20L) != 0L)
            return jjStartNfaWithStates_0(10, 69, 173);
         else if ((active3 & 0x100000000L) != 0L)
            return jjStartNfaWithStates_0(10, 224, 173);
         break;
      case 70:
         return jjMoveStringLiteralDfa11_0(active1, 0L, active2, 0x800000000000000L, active3, 0L, active4, 0L);
      case 73:
         return jjMoveStringLiteralDfa11_0(active1, 0L, active2, 0x80000L, active3, 0L, active4, 0L);
      case 75:
         if ((active2 & 0x8000000000000000L) != 0L)
            return jjStartNfaWithStates_0(10, 191, 173);
         break;
      case 77:
         return jjMoveStringLiteralDfa11_0(active1, 0L, active2, 0x1800000L, active3, 0L, active4, 0L);
      case 83:
         return jjMoveStringLiteralDfa11_0(active1, 0L, active2, 0x1000000200000L, active3, 0L, active4, 0L);
      case 84:
         if ((active2 & 0x2L) != 0L)
            return jjStartNfaWithStates_0(10, 129, 173);
         else if ((active2 & 0x80000000L) != 0L)
            return jjStartNfaWithStates_0(10, 159, 173);
         return jjMoveStringLiteralDfa11_0(active1, 0L, active2, 0x100000L, active3, 0L, active4, 0L);
      case 86:
         if ((active2 & 0x400000L) != 0L)
            return jjStartNfaWithStates_0(10, 150, 174);
         break;
      case 101:
         if ((active4 & 0x20000L) != 0L)
            return jjStopAtPos(10, 273);
         break;
      default :
         break;
   }
   return jjStartNfa_0(9, 0L, active1, active2, active3, active4);
}
private int jjMoveStringLiteralDfa11_0(long old1, long active1, long old2, long active2, long old3, long active3, long old4, long active4)
{
   if (((active1 &= old1) | (active2 &= old2) | (active3 &= old3) | (active4 &= old4)) == 0L)
      return jjStartNfa_0(9, 0L, old1, old2, old3, old4);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(10, 0L, 0L, active2, 0L, 0L);
      return 11;
   }
   switch(curChar)
   {
      case 69:
         return jjMoveStringLiteralDfa12_0(active2, 0x100000L);
      case 73:
         return jjMoveStringLiteralDfa12_0(active2, 0x800000000040000L);
      case 78:
         return jjMoveStringLiteralDfa12_0(active2, 0x80000L);
      case 83:
         return jjMoveStringLiteralDfa12_0(active2, 0x1800000L);
      case 84:
         if ((active2 & 0x200000L) != 0L)
            return jjStartNfaWithStates_0(11, 149, 174);
         else if ((active2 & 0x1000000000000L) != 0L)
            return jjStartNfaWithStates_0(11, 176, 173);
         break;
      default :
         break;
   }
   return jjStartNfa_0(10, 0L, 0L, active2, 0L, 0L);
}
private int jjMoveStringLiteralDfa12_0(long old2, long active2)
{
   if (((active2 &= old2)) == 0L)
      return jjStartNfa_0(10, 0L, 0L, old2, 0L, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(11, 0L, 0L, active2, 0L, 0L);
      return 12;
   }
   switch(curChar)
   {
      case 67:
         return jjMoveStringLiteralDfa13_0(active2, 0x800000000000000L);
      case 68:
         return jjMoveStringLiteralDfa13_0(active2, 0x800000L);
      case 73:
         return jjMoveStringLiteralDfa13_0(active2, 0x1000000L);
      case 83:
         return jjMoveStringLiteralDfa13_0(active2, 0x140000L);
      case 86:
         if ((active2 & 0x80000L) != 0L)
            return jjStartNfaWithStates_0(12, 147, 174);
         break;
      default :
         break;
   }
   return jjStartNfa_0(11, 0L, 0L, active2, 0L, 0L);
}
private int jjMoveStringLiteralDfa13_0(long old2, long active2)
{
   if (((active2 &= old2)) == 0L)
      return jjStartNfa_0(11, 0L, 0L, old2, 0L, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(12, 0L, 0L, active2, 0L, 0L);
      return 13;
   }
   switch(curChar)
   {
      case 69:
         return jjMoveStringLiteralDfa14_0(active2, 0x800000000000000L);
      case 73:
         return jjMoveStringLiteralDfa14_0(active2, 0x800000L);
      case 78:
         return jjMoveStringLiteralDfa14_0(active2, 0x1000000L);
      case 84:
         if ((active2 & 0x40000L) != 0L)
            return jjStartNfaWithStates_0(13, 146, 174);
         else if ((active2 & 0x100000L) != 0L)
            return jjStartNfaWithStates_0(13, 148, 174);
         break;
      default :
         break;
   }
   return jjStartNfa_0(12, 0L, 0L, active2, 0L, 0L);
}
private int jjMoveStringLiteralDfa14_0(long old2, long active2)
{
   if (((active2 &= old2)) == 0L)
      return jjStartNfa_0(12, 0L, 0L, old2, 0L, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(13, 0L, 0L, active2, 0L, 0L);
      return 14;
   }
   switch(curChar)
   {
      case 46:
         return jjMoveStringLiteralDfa15_0(active2, 0x800000000000000L);
      case 83:
         return jjMoveStringLiteralDfa15_0(active2, 0x800000L);
      case 86:
         if ((active2 & 0x1000000L) != 0L)
            return jjStartNfaWithStates_0(14, 152, 174);
         break;
      default :
         break;
   }
   return jjStartNfa_0(13, 0L, 0L, active2, 0L, 0L);
}
private int jjMoveStringLiteralDfa15_0(long old2, long active2)
{
   if (((active2 &= old2)) == 0L)
      return jjStartNfa_0(13, 0L, 0L, old2, 0L, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(14, 0L, 0L, active2, 0L, 0L);
      return 15;
   }
   switch(curChar)
   {
      case 69:
         return jjMoveStringLiteralDfa16_0(active2, 0x800000000000000L);
      case 84:
         if ((active2 & 0x800000L) != 0L)
            return jjStartNfaWithStates_0(15, 151, 174);
         break;
      default :
         break;
   }
   return jjStartNfa_0(14, 0L, 0L, active2, 0L, 0L);
}
private int jjMoveStringLiteralDfa16_0(long old2, long active2)
{
   if (((active2 &= old2)) == 0L)
      return jjStartNfa_0(14, 0L, 0L, old2, 0L, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(15, 0L, 0L, active2, 0L, 0L);
      return 16;
   }
   switch(curChar)
   {
      case 82:
         return jjMoveStringLiteralDfa17_0(active2, 0x800000000000000L);
      default :
         break;
   }
   return jjStartNfa_0(15, 0L, 0L, active2, 0L, 0L);
}
private int jjMoveStringLiteralDfa17_0(long old2, long active2)
{
   if (((active2 &= old2)) == 0L)
      return jjStartNfa_0(15, 0L, 0L, old2, 0L, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(16, 0L, 0L, active2, 0L, 0L);
      return 17;
   }
   switch(curChar)
   {
      case 82:
         return jjMoveStringLiteralDfa18_0(active2, 0x800000000000000L);
      default :
         break;
   }
   return jjStartNfa_0(16, 0L, 0L, active2, 0L, 0L);
}
private int jjMoveStringLiteralDfa18_0(long old2, long active2)
{
   if (((active2 &= old2)) == 0L)
      return jjStartNfa_0(16, 0L, 0L, old2, 0L, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(17, 0L, 0L, active2, 0L, 0L);
      return 18;
   }
   switch(curChar)
   {
      case 79:
         return jjMoveStringLiteralDfa19_0(active2, 0x800000000000000L);
      default :
         break;
   }
   return jjStartNfa_0(17, 0L, 0L, active2, 0L, 0L);
}
private int jjMoveStringLiteralDfa19_0(long old2, long active2)
{
   if (((active2 &= old2)) == 0L)
      return jjStartNfa_0(17, 0L, 0L, old2, 0L, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(18, 0L, 0L, active2, 0L, 0L);
      return 19;
   }
   switch(curChar)
   {
      case 82:
         return jjMoveStringLiteralDfa20_0(active2, 0x800000000000000L);
      default :
         break;
   }
   return jjStartNfa_0(18, 0L, 0L, active2, 0L, 0L);
}
private int jjMoveStringLiteralDfa20_0(long old2, long active2)
{
   if (((active2 &= old2)) == 0L)
      return jjStartNfa_0(18, 0L, 0L, old2, 0L, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(19, 0L, 0L, active2, 0L, 0L);
      return 20;
   }
   switch(curChar)
   {
      case 84:
         return jjMoveStringLiteralDfa21_0(active2, 0x800000000000000L);
      default :
         break;
   }
   return jjStartNfa_0(19, 0L, 0L, active2, 0L, 0L);
}
private int jjMoveStringLiteralDfa21_0(long old2, long active2)
{
   if (((active2 &= old2)) == 0L)
      return jjStartNfa_0(19, 0L, 0L, old2, 0L, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(20, 0L, 0L, active2, 0L, 0L);
      return 21;
   }
   switch(curChar)
   {
      case 89:
         return jjMoveStringLiteralDfa22_0(active2, 0x800000000000000L);
      default :
         break;
   }
   return jjStartNfa_0(20, 0L, 0L, active2, 0L, 0L);
}
private int jjMoveStringLiteralDfa22_0(long old2, long active2)
{
   if (((active2 &= old2)) == 0L)
      return jjStartNfa_0(20, 0L, 0L, old2, 0L, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(21, 0L, 0L, active2, 0L, 0L);
      return 22;
   }
   switch(curChar)
   {
      case 80:
         return jjMoveStringLiteralDfa23_0(active2, 0x800000000000000L);
      default :
         break;
   }
   return jjStartNfa_0(21, 0L, 0L, active2, 0L, 0L);
}
private int jjMoveStringLiteralDfa23_0(long old2, long active2)
{
   if (((active2 &= old2)) == 0L)
      return jjStartNfa_0(21, 0L, 0L, old2, 0L, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(22, 0L, 0L, active2, 0L, 0L);
      return 23;
   }
   switch(curChar)
   {
      case 69:
         if ((active2 & 0x800000000000000L) != 0L)
            return jjStartNfaWithStates_0(23, 187, 174);
         break;
      default :
         break;
   }
   return jjStartNfa_0(22, 0L, 0L, active2, 0L, 0L);
}
private int jjStartNfaWithStates_0(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_0(state, pos + 1);
}
static final long[] jjbitVec0 = {
   0xfffffffffffffffeL, 0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static final long[] jjbitVec2 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
private int jjMoveNfa_0(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 173;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 3:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 20)
                        kind = 20;
                     jjCheckNAddStates(0, 6);
                  }
                  else if ((0x800100000000000L & l) != 0L)
                  {
                     if (kind > 313)
                        kind = 313;
                  }
                  else if (curChar == 35)
                     jjCheckNAddStates(7, 12);
                  else if (curChar == 36)
                     jjCheckNAddStates(13, 17);
                  else if (curChar == 39)
                     jjCheckNAddStates(18, 29);
                  else if (curChar == 58)
                     jjstateSet[jjnewStateCnt++] = 27;
                  else if (curChar == 34)
                     jjCheckNAddStates(30, 32);
                  else if (curChar == 46)
                     jjCheckNAdd(5);
                  else if (curChar == 47)
                     jjstateSet[jjnewStateCnt++] = 2;
                  break;
               case 173:
                  if ((0x3ff400000000000L & l) != 0L)
                  {
                     if (kind > 312)
                        kind = 312;
                     jjCheckNAdd(140);
                  }
                  else if (curChar == 58)
                     jjCheckNAddTwoStates(132, 133);
                  else if (curChar == 36)
                     jjCheckNAdd(129);
                  else if (curChar == 33)
                     jjCheckNAddStates(33, 36);
                  if ((0x3ff400000000000L & l) != 0L)
                     jjCheckNAddStates(37, 39);
                  else if (curChar == 58)
                     jjAddStates(40, 41);
                  else if (curChar == 36)
                     jjCheckNAdd(77);
                  else if (curChar == 33)
                     jjCheckNAddStates(42, 44);
                  if ((0x3ff400000000000L & l) != 0L)
                     jjCheckNAddTwoStates(72, 73);
                  else if (curChar == 36)
                     jjCheckNAdd(66);
                  else if (curChar == 33)
                     jjCheckNAddStates(45, 47);
                  if ((0x3ff400000000000L & l) != 0L)
                     jjCheckNAddTwoStates(61, 62);
                  else if (curChar == 33)
                     jjstateSet[jjnewStateCnt++] = 14;
                  if ((0x3ff400000000000L & l) != 0L)
                     jjCheckNAddTwoStates(59, 60);
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 304)
                        kind = 304;
                     jjCheckNAddTwoStates(129, 112);
                  }
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(77, 78);
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 299)
                        kind = 299;
                     jjCheckNAdd(66);
                  }
                  break;
               case 15:
                  if ((0x3ff400000000000L & l) != 0L)
                  {
                     if (kind > 312)
                        kind = 312;
                     jjCheckNAdd(140);
                  }
                  else if (curChar == 58)
                     jjCheckNAddTwoStates(132, 133);
                  else if (curChar == 36)
                     jjCheckNAdd(129);
                  else if (curChar == 33)
                     jjCheckNAddStates(33, 36);
                  if ((0x3ff400000000000L & l) != 0L)
                     jjCheckNAddStates(37, 39);
                  else if (curChar == 58)
                     jjAddStates(40, 41);
                  else if (curChar == 36)
                     jjCheckNAdd(77);
                  else if (curChar == 33)
                     jjCheckNAddStates(42, 44);
                  if ((0x3ff400000000000L & l) != 0L)
                     jjCheckNAddTwoStates(72, 73);
                  else if (curChar == 36)
                     jjCheckNAdd(66);
                  else if (curChar == 33)
                     jjCheckNAddStates(45, 47);
                  if ((0x3ff400000000000L & l) != 0L)
                     jjCheckNAddTwoStates(61, 62);
                  else if (curChar == 33)
                     jjstateSet[jjnewStateCnt++] = 14;
                  if ((0x3ff400000000000L & l) != 0L)
                     jjCheckNAddTwoStates(59, 60);
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 304)
                        kind = 304;
                     jjCheckNAddTwoStates(129, 112);
                  }
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(77, 78);
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 299)
                        kind = 299;
                     jjCheckNAdd(66);
                  }
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(25, 19);
                  break;
               case 174:
                  if ((0x3ff400000000000L & l) != 0L)
                  {
                     if (kind > 312)
                        kind = 312;
                     jjCheckNAdd(140);
                  }
                  else if (curChar == 33)
                     jjCheckNAddStates(33, 36);
                  else if (curChar == 58)
                     jjAddStates(40, 41);
                  if ((0x3ff400000000000L & l) != 0L)
                     jjCheckNAddStates(37, 39);
                  else if (curChar == 33)
                     jjCheckNAddStates(42, 44);
                  if ((0x3ff400000000000L & l) != 0L)
                     jjCheckNAddTwoStates(72, 73);
                  else if (curChar == 33)
                     jjCheckNAddStates(45, 47);
                  if ((0x3ff400000000000L & l) != 0L)
                     jjCheckNAddTwoStates(61, 62);
                  else if (curChar == 33)
                     jjstateSet[jjnewStateCnt++] = 14;
                  if ((0x3ff400000000000L & l) != 0L)
                     jjCheckNAddTwoStates(59, 60);
                  break;
               case 175:
                  if ((0x3ff400000000000L & l) != 0L)
                  {
                     if (kind > 312)
                        kind = 312;
                     jjCheckNAdd(140);
                  }
                  else if (curChar == 58)
                     jjCheckNAddStates(48, 50);
                  else if (curChar == 33)
                     jjCheckNAddStates(33, 36);
                  if ((0x3ff400000000000L & l) != 0L)
                     jjCheckNAddStates(37, 39);
                  else if (curChar == 58)
                     jjAddStates(40, 41);
                  else if (curChar == 33)
                     jjCheckNAddStates(42, 44);
                  if ((0x3ff400000000000L & l) != 0L)
                     jjCheckNAddTwoStates(72, 73);
                  else if (curChar == 58)
                     jjCheckNAddStates(51, 55);
                  else if (curChar == 33)
                     jjCheckNAddStates(45, 47);
                  if ((0x3ff400000000000L & l) != 0L)
                     jjCheckNAddTwoStates(61, 62);
                  else if (curChar == 33)
                     jjstateSet[jjnewStateCnt++] = 14;
                  if ((0x3ff400000000000L & l) != 0L)
                     jjCheckNAddTwoStates(59, 60);
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 304)
                        kind = 304;
                     jjCheckNAddTwoStates(129, 112);
                  }
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(77, 78);
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 299)
                        kind = 299;
                     jjCheckNAdd(66);
                  }
                  break;
               case 0:
                  if (curChar == 42)
                     jjstateSet[jjnewStateCnt++] = 1;
                  break;
               case 1:
                  if ((0xffff7fffffffffffL & l) != 0L && kind > 7)
                     kind = 7;
                  break;
               case 2:
                  if (curChar == 42)
                     jjstateSet[jjnewStateCnt++] = 0;
                  break;
               case 4:
                  if (curChar == 46)
                     jjCheckNAdd(5);
                  break;
               case 5:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 21)
                     kind = 21;
                  jjCheckNAddTwoStates(5, 6);
                  break;
               case 7:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(8);
                  break;
               case 8:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 21)
                     kind = 21;
                  jjCheckNAdd(8);
                  break;
               case 9:
               case 11:
                  if (curChar == 34)
                     jjCheckNAddStates(30, 32);
                  break;
               case 10:
                  if ((0xfffffffbffffffffL & l) != 0L)
                     jjCheckNAddStates(30, 32);
                  break;
               case 12:
                  if (curChar == 34)
                     jjstateSet[jjnewStateCnt++] = 11;
                  break;
               case 13:
                  if (curChar == 34 && kind > 23)
                     kind = 23;
                  break;
               case 16:
                  if (curChar == 45)
                     jjCheckNAdd(17);
                  break;
               case 17:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(17, 18);
                  break;
               case 21:
                  if (curChar == 45)
                     jjCheckNAdd(22);
                  break;
               case 22:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(22, 23);
                  break;
               case 24:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 294)
                     kind = 294;
                  jjstateSet[jjnewStateCnt++] = 24;
                  break;
               case 25:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(25, 19);
                  break;
               case 26:
                  if ((0x800100000000000L & l) != 0L && kind > 313)
                     kind = 313;
                  break;
               case 27:
                  if (curChar == 58)
                     jjAddStates(56, 57);
                  break;
               case 41:
                  if (curChar == 58)
                     jjstateSet[jjnewStateCnt++] = 27;
                  break;
               case 42:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 20)
                     kind = 20;
                  jjCheckNAddStates(0, 6);
                  break;
               case 43:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 20)
                     kind = 20;
                  jjCheckNAdd(43);
                  break;
               case 44:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(44, 45);
                  break;
               case 45:
                  if (curChar != 46)
                     break;
                  if (kind > 21)
                     kind = 21;
                  jjCheckNAddTwoStates(46, 47);
                  break;
               case 46:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 21)
                     kind = 21;
                  jjCheckNAddTwoStates(46, 47);
                  break;
               case 48:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(49);
                  break;
               case 49:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 21)
                     kind = 21;
                  jjCheckNAdd(49);
                  break;
               case 50:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(50, 51);
                  break;
               case 52:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(53);
                  break;
               case 53:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 21)
                     kind = 21;
                  jjCheckNAdd(53);
                  break;
               case 54:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(54, 55);
                  break;
               case 55:
                  if (curChar == 58)
                     jjCheckNAddTwoStates(56, 57);
                  break;
               case 56:
                  if (curChar == 36)
                     jjCheckNAdd(57);
                  break;
               case 57:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 304)
                     kind = 304;
                  jjCheckNAdd(57);
                  break;
               case 59:
                  if ((0x3ff400000000000L & l) != 0L)
                     jjCheckNAddTwoStates(59, 60);
                  break;
               case 60:
                  if (curChar == 33)
                     jjstateSet[jjnewStateCnt++] = 14;
                  break;
               case 61:
                  if ((0x3ff400000000000L & l) != 0L)
                     jjCheckNAddTwoStates(61, 62);
                  break;
               case 62:
               case 161:
                  if (curChar == 33)
                     jjCheckNAddStates(45, 47);
                  break;
               case 63:
                  if (curChar == 36)
                     jjCheckNAdd(64);
                  break;
               case 65:
                  if (curChar == 36)
                     jjCheckNAdd(66);
                  break;
               case 66:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 299)
                     kind = 299;
                  jjCheckNAdd(66);
                  break;
               case 67:
                  if (curChar == 33 && kind > 299)
                     kind = 299;
                  break;
               case 71:
                  if (curChar == 35)
                     jjCheckNAdd(70);
                  break;
               case 72:
                  if ((0x3ff400000000000L & l) != 0L)
                     jjCheckNAddTwoStates(72, 73);
                  break;
               case 73:
               case 165:
                  if (curChar == 33)
                     jjCheckNAddStates(42, 44);
                  break;
               case 74:
                  if (curChar == 36)
                     jjCheckNAdd(75);
                  break;
               case 76:
                  if (curChar == 36)
                     jjCheckNAdd(77);
                  break;
               case 77:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(77, 78);
                  break;
               case 78:
                  if (curChar == 58)
                     jjCheckNAddStates(51, 55);
                  break;
               case 80:
                  if ((0x3ff400000000000L & l) != 0L)
                     jjCheckNAddTwoStates(80, 81);
                  break;
               case 81:
               case 97:
                  if (curChar == 33)
                     jjCheckNAddStates(58, 60);
                  break;
               case 82:
                  if (curChar == 36)
                     jjCheckNAdd(83);
                  break;
               case 84:
                  if (curChar == 36)
                     jjCheckNAdd(85);
                  break;
               case 85:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 300)
                     kind = 300;
                  jjCheckNAdd(85);
                  break;
               case 86:
                  if (curChar == 33 && kind > 300)
                     kind = 300;
                  break;
               case 90:
                  if (curChar == 35)
                     jjCheckNAdd(89);
                  break;
               case 91:
               case 92:
                  if (curChar == 39)
                     jjCheckNAddStates(61, 63);
                  break;
               case 93:
                  if (curChar == 39)
                     jjstateSet[jjnewStateCnt++] = 92;
                  break;
               case 94:
                  if ((0xffffff7fffffffffL & l) != 0L)
                     jjCheckNAddStates(61, 63);
                  break;
               case 95:
                  if (curChar == 39)
                     jjCheckNAdd(81);
                  break;
               case 96:
                  if (curChar == 35)
                     jjCheckNAddTwoStates(100, 89);
                  break;
               case 101:
                  if (curChar == 33)
                     jjCheckNAdd(78);
                  break;
               case 105:
                  if (curChar == 35)
                     jjCheckNAdd(104);
                  break;
               case 106:
                  if ((0x3ff400000000000L & l) != 0L)
                     jjCheckNAddStates(37, 39);
                  break;
               case 107:
                  if (curChar == 58)
                     jjAddStates(40, 41);
                  break;
               case 109:
                  if ((0x3ff400000000000L & l) != 0L)
                     jjCheckNAddTwoStates(109, 110);
                  break;
               case 110:
               case 169:
                  if (curChar == 33)
                     jjCheckNAddStates(33, 36);
                  break;
               case 111:
                  if (curChar != 33)
                     break;
                  if (kind > 304)
                     kind = 304;
                  jjCheckNAdd(112);
                  break;
               case 112:
                  if (curChar == 58)
                     jjCheckNAddStates(48, 50);
                  break;
               case 113:
                  if (curChar == 36)
                     jjCheckNAdd(114);
                  break;
               case 115:
                  if (curChar == 36)
                     jjCheckNAdd(116);
                  break;
               case 116:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 304)
                     kind = 304;
                  jjCheckNAdd(116);
                  break;
               case 117:
                  if (curChar == 33 && kind > 304)
                     kind = 304;
                  break;
               case 121:
                  if (curChar == 35)
                     jjstateSet[jjnewStateCnt++] = 120;
                  break;
               case 125:
                  if (curChar == 35)
                     jjCheckNAdd(124);
                  break;
               case 126:
                  if (curChar == 36)
                     jjCheckNAddStates(64, 66);
                  break;
               case 128:
                  if (curChar == 36)
                     jjCheckNAdd(129);
                  break;
               case 129:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 304)
                     kind = 304;
                  jjCheckNAddTwoStates(129, 112);
                  break;
               case 131:
                  if (curChar == 58)
                     jjCheckNAddTwoStates(132, 133);
                  break;
               case 132:
                  if (curChar == 36)
                     jjCheckNAdd(133);
                  break;
               case 135:
               case 136:
                  if (curChar == 39)
                     jjCheckNAddStates(67, 69);
                  break;
               case 137:
                  if (curChar == 39)
                     jjstateSet[jjnewStateCnt++] = 136;
                  break;
               case 138:
                  if ((0xffffff7fffffffffL & l) != 0L)
                     jjCheckNAddStates(67, 69);
                  break;
               case 139:
                  if (curChar == 39)
                     jjCheckNAdd(110);
                  break;
               case 140:
                  if ((0x3ff400000000000L & l) == 0L)
                     break;
                  if (kind > 312)
                     kind = 312;
                  jjCheckNAdd(140);
                  break;
               case 141:
                  if (curChar == 39)
                     jjCheckNAddStates(18, 29);
                  break;
               case 142:
                  if (curChar == 39)
                     jjCheckNAddStates(70, 72);
                  break;
               case 143:
                  if (curChar == 39)
                     jjstateSet[jjnewStateCnt++] = 142;
                  break;
               case 144:
                  if ((0xffffff7fffffffffL & l) != 0L)
                     jjCheckNAddStates(70, 72);
                  break;
               case 145:
                  if (curChar == 39)
                     jjCheckNAdd(60);
                  break;
               case 146:
                  if (curChar == 39)
                     jjCheckNAddStates(73, 75);
                  break;
               case 147:
                  if (curChar == 39)
                     jjstateSet[jjnewStateCnt++] = 146;
                  break;
               case 148:
                  if ((0xffffff7fffffffffL & l) != 0L)
                     jjCheckNAddStates(73, 75);
                  break;
               case 149:
                  if (curChar == 39)
                     jjCheckNAdd(62);
                  break;
               case 150:
                  if (curChar == 39)
                     jjCheckNAddStates(76, 78);
                  break;
               case 151:
                  if (curChar == 39)
                     jjstateSet[jjnewStateCnt++] = 150;
                  break;
               case 152:
                  if ((0xffffff7fffffffffL & l) != 0L)
                     jjCheckNAddStates(76, 78);
                  break;
               case 153:
                  if (curChar == 39)
                     jjCheckNAdd(73);
                  break;
               case 154:
                  if (curChar == 39)
                     jjCheckNAddStates(79, 81);
                  break;
               case 155:
                  if (curChar == 39)
                     jjstateSet[jjnewStateCnt++] = 154;
                  break;
               case 156:
                  if ((0xffffff7fffffffffL & l) != 0L)
                     jjCheckNAddStates(79, 81);
                  break;
               case 157:
                  if (curChar == 39)
                     jjCheckNAddTwoStates(107, 110);
                  break;
               case 158:
                  if (curChar == 36)
                     jjCheckNAddStates(13, 17);
                  break;
               case 160:
                  if (curChar == 35)
                     jjCheckNAddStates(7, 12);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 3:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 312)
                        kind = 312;
                     jjCheckNAddStates(82, 91);
                  }
                  if ((0x7fffffeL & l) != 0L)
                     jjCheckNAddStates(92, 102);
                  if (curChar == 82)
                     jjCheckNAddStates(103, 105);
                  break;
               case 173:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 312)
                        kind = 312;
                     jjCheckNAdd(140);
                  }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddStates(37, 39);
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(72, 73);
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(61, 62);
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(59, 60);
                  if ((0x7fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(130, 131);
                  if ((0x7fffffeL & l) != 0L)
                     jjCheckNAddStates(106, 108);
                  if ((0x7fffffeL & l) != 0L)
                     jjCheckNAddStates(109, 111);
                  if ((0x7fffffeL & l) != 0L)
                     jjCheckNAddStates(112, 114);
                  break;
               case 15:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 312)
                        kind = 312;
                     jjCheckNAdd(140);
                  }
                  else if (curChar == 91)
                     jjAddStates(115, 116);
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddStates(37, 39);
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(72, 73);
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(61, 62);
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(59, 60);
                  if ((0x7fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(130, 131);
                  if ((0x7fffffeL & l) != 0L)
                     jjCheckNAddStates(106, 108);
                  if ((0x7fffffeL & l) != 0L)
                     jjCheckNAddStates(109, 111);
                  if ((0x7fffffeL & l) != 0L)
                     jjCheckNAddStates(112, 114);
                  if (curChar == 67)
                  {
                     if (kind > 294)
                        kind = 294;
                     jjAddStates(117, 118);
                  }
                  break;
               case 174:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 312)
                        kind = 312;
                     jjCheckNAdd(140);
                  }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddStates(37, 39);
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(72, 73);
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(61, 62);
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(59, 60);
                  break;
               case 175:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 312)
                        kind = 312;
                     jjCheckNAdd(140);
                  }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddStates(37, 39);
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(72, 73);
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(61, 62);
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(59, 60);
                  break;
               case 164:
                  if (curChar == 82)
                     jjstateSet[jjnewStateCnt++] = 123;
                  if (curChar == 82)
                     jjstateSet[jjnewStateCnt++] = 171;
                  if (curChar == 82)
                     jjstateSet[jjnewStateCnt++] = 103;
                  if (curChar == 82)
                     jjstateSet[jjnewStateCnt++] = 167;
                  if (curChar == 82)
                     jjstateSet[jjnewStateCnt++] = 69;
                  if (curChar == 82)
                     jjstateSet[jjnewStateCnt++] = 163;
                  break;
               case 1:
                  if (kind > 7)
                     kind = 7;
                  break;
               case 6:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(119, 120);
                  break;
               case 10:
                  jjAddStates(30, 32);
                  break;
               case 14:
                  if (curChar == 82)
                     jjCheckNAddStates(103, 105);
                  break;
               case 18:
                  if (curChar == 93)
                     jjCheckNAdd(19);
                  break;
               case 19:
                  if (curChar != 67)
                     break;
                  if (kind > 294)
                     kind = 294;
                  jjAddStates(117, 118);
                  break;
               case 20:
                  if (curChar == 91)
                     jjAddStates(121, 122);
                  break;
               case 23:
                  if (curChar == 93 && kind > 294)
                     kind = 294;
                  break;
               case 28:
                  if (curChar == 67 && kind > 314)
                     kind = 314;
                  break;
               case 29:
                  if (curChar == 73)
                     jjstateSet[jjnewStateCnt++] = 28;
                  break;
               case 30:
                  if (curChar == 82)
                     jjstateSet[jjnewStateCnt++] = 29;
                  break;
               case 31:
                  if (curChar == 69)
                     jjstateSet[jjnewStateCnt++] = 30;
                  break;
               case 32:
                  if (curChar == 77)
                     jjstateSet[jjnewStateCnt++] = 31;
                  break;
               case 33:
                  if (curChar == 85)
                     jjstateSet[jjnewStateCnt++] = 32;
                  break;
               case 34:
                  if (curChar == 78)
                     jjstateSet[jjnewStateCnt++] = 33;
                  break;
               case 35:
                  if (curChar == 71 && kind > 314)
                     kind = 314;
                  break;
               case 36:
                  if (curChar == 78)
                     jjstateSet[jjnewStateCnt++] = 35;
                  break;
               case 37:
                  if (curChar == 73)
                     jjstateSet[jjnewStateCnt++] = 36;
                  break;
               case 38:
                  if (curChar == 82)
                     jjstateSet[jjnewStateCnt++] = 37;
                  break;
               case 39:
                  if (curChar == 84)
                     jjstateSet[jjnewStateCnt++] = 38;
                  break;
               case 40:
                  if (curChar == 83)
                     jjstateSet[jjnewStateCnt++] = 39;
                  break;
               case 47:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(123, 124);
                  break;
               case 51:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(125, 126);
                  break;
               case 58:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 312)
                     kind = 312;
                  jjCheckNAddStates(82, 91);
                  break;
               case 59:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(59, 60);
                  break;
               case 61:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(61, 62);
                  break;
               case 64:
                  if ((0x7fffffeL & l) != 0L)
                     jjCheckNAddStates(112, 114);
                  break;
               case 68:
                  if (curChar == 70)
                     jjstateSet[jjnewStateCnt++] = 67;
                  break;
               case 69:
                  if (curChar == 69)
                     jjstateSet[jjnewStateCnt++] = 68;
                  break;
               case 70:
                  if (curChar == 82)
                     jjstateSet[jjnewStateCnt++] = 69;
                  break;
               case 72:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(72, 73);
                  break;
               case 75:
                  if ((0x7fffffeL & l) != 0L)
                     jjCheckNAddStates(109, 111);
                  break;
               case 79:
               case 80:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(80, 81);
                  break;
               case 83:
                  if ((0x7fffffeL & l) != 0L)
                     jjAddStates(127, 129);
                  break;
               case 87:
                  if (curChar == 70)
                     jjstateSet[jjnewStateCnt++] = 86;
                  break;
               case 88:
                  if (curChar == 69)
                     jjstateSet[jjnewStateCnt++] = 87;
                  break;
               case 89:
                  if (curChar == 82)
                     jjstateSet[jjnewStateCnt++] = 88;
                  break;
               case 94:
                  jjAddStates(61, 63);
                  break;
               case 98:
                  if (curChar == 70)
                     jjstateSet[jjnewStateCnt++] = 97;
                  break;
               case 99:
                  if (curChar == 69)
                     jjstateSet[jjnewStateCnt++] = 98;
                  break;
               case 100:
                  if (curChar == 82)
                     jjstateSet[jjnewStateCnt++] = 99;
                  break;
               case 102:
                  if (curChar == 70)
                     jjstateSet[jjnewStateCnt++] = 101;
                  break;
               case 103:
                  if (curChar == 69)
                     jjstateSet[jjnewStateCnt++] = 102;
                  break;
               case 104:
                  if (curChar == 82)
                     jjstateSet[jjnewStateCnt++] = 103;
                  break;
               case 106:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddStates(37, 39);
                  break;
               case 108:
               case 109:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(109, 110);
                  break;
               case 114:
                  if ((0x7fffffeL & l) != 0L)
                     jjAddStates(130, 132);
                  break;
               case 118:
                  if (curChar == 70)
                     jjstateSet[jjnewStateCnt++] = 117;
                  break;
               case 119:
                  if (curChar == 69)
                     jjstateSet[jjnewStateCnt++] = 118;
                  break;
               case 120:
                  if (curChar == 82)
                     jjstateSet[jjnewStateCnt++] = 119;
                  break;
               case 122:
                  if (curChar == 70)
                     jjstateSet[jjnewStateCnt++] = 111;
                  break;
               case 123:
                  if (curChar == 69)
                     jjstateSet[jjnewStateCnt++] = 122;
                  break;
               case 124:
                  if (curChar == 82)
                     jjstateSet[jjnewStateCnt++] = 123;
                  break;
               case 127:
                  if ((0x7fffffeL & l) != 0L)
                     jjCheckNAddStates(106, 108);
                  break;
               case 130:
                  if ((0x7fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(130, 131);
                  break;
               case 133:
                  if ((0x7fffffeL & l) == 0L)
                     break;
                  if (kind > 304)
                     kind = 304;
                  jjstateSet[jjnewStateCnt++] = 133;
                  break;
               case 134:
                  if ((0x7fffffeL & l) != 0L)
                     jjCheckNAddStates(133, 137);
                  break;
               case 138:
                  jjAddStates(67, 69);
                  break;
               case 140:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 312)
                     kind = 312;
                  jjCheckNAdd(140);
                  break;
               case 144:
                  jjAddStates(70, 72);
                  break;
               case 148:
                  jjAddStates(73, 75);
                  break;
               case 152:
                  jjAddStates(76, 78);
                  break;
               case 156:
                  jjAddStates(79, 81);
                  break;
               case 159:
                  if ((0x7fffffeL & l) != 0L)
                     jjCheckNAddStates(92, 102);
                  break;
               case 162:
                  if (curChar == 70)
                     jjstateSet[jjnewStateCnt++] = 161;
                  break;
               case 163:
                  if (curChar == 69)
                     jjstateSet[jjnewStateCnt++] = 162;
                  break;
               case 166:
                  if (curChar == 70)
                     jjstateSet[jjnewStateCnt++] = 165;
                  break;
               case 167:
                  if (curChar == 69)
                     jjstateSet[jjnewStateCnt++] = 166;
                  break;
               case 168:
                  if (curChar == 82)
                     jjstateSet[jjnewStateCnt++] = 167;
                  break;
               case 170:
                  if (curChar == 70)
                     jjstateSet[jjnewStateCnt++] = 169;
                  break;
               case 171:
                  if (curChar == 69)
                     jjstateSet[jjnewStateCnt++] = 170;
                  break;
               case 172:
                  if (curChar == 82)
                     jjstateSet[jjnewStateCnt++] = 171;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 1:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2) && kind > 7)
                     kind = 7;
                  break;
               case 10:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjAddStates(30, 32);
                  break;
               case 94:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjAddStates(61, 63);
                  break;
               case 138:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjAddStates(67, 69);
                  break;
               case 144:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjAddStates(70, 72);
                  break;
               case 148:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjAddStates(73, 75);
                  break;
               case 152:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjAddStates(76, 78);
                  break;
               case 156:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjAddStates(79, 81);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 173 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private int jjMoveStringLiteralDfa0_3()
{
   switch(curChar)
   {
      case 42:
         return jjMoveStringLiteralDfa1_3(0x800L);
      default :
         return 1;
   }
}
private int jjMoveStringLiteralDfa1_3(long active0)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 1;
   }
   switch(curChar)
   {
      case 47:
         if ((active0 & 0x800L) != 0L)
            return jjStopAtPos(1, 11);
         break;
      default :
         return 2;
   }
   return 2;
}
private int jjMoveStringLiteralDfa0_1()
{
   return jjMoveNfa_1(0, 0);
}
private int jjMoveNfa_1(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 3;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0x2400L & l) != 0L)
                  {
                     if (kind > 9)
                        kind = 9;
                  }
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 1;
                  break;
               case 1:
                  if (curChar == 10 && kind > 9)
                     kind = 9;
                  break;
               case 2:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 1;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 3 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private int jjMoveStringLiteralDfa0_2()
{
   switch(curChar)
   {
      case 42:
         return jjMoveStringLiteralDfa1_2(0x400L);
      default :
         return 1;
   }
}
private int jjMoveStringLiteralDfa1_2(long active0)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 1;
   }
   switch(curChar)
   {
      case 47:
         if ((active0 & 0x400L) != 0L)
            return jjStopAtPos(1, 10);
         break;
      default :
         return 2;
   }
   return 2;
}
private final int jjStopStringLiteralDfa_4(int pos, long active0, long active1, long active2, long active3, long active4)
{
   switch (pos)
   {
      default :
         return -1;
   }
}
private final int jjStartNfa_4(int pos, long active0, long active1, long active2, long active3, long active4)
{
   return jjMoveNfa_4(jjStopStringLiteralDfa_4(pos, active0, active1, active2, active3, active4), pos + 1);
}
private int jjMoveStringLiteralDfa0_4()
{
   switch(curChar)
   {
      case 58:
         return jjStopAtPos(0, 308);
      case 93:
         return jjStopAtPos(0, 311);
      default :
         return jjMoveNfa_4(0, 0);
   }
}
static final long[] jjbitVec3 = {
   0xfff0000000200002L, 0xffffffffffffdfffL, 0xfffff00f7fffffffL, 0x12000000007fffffL
};
static final long[] jjbitVec4 = {
   0x0L, 0x0L, 0x420043c00000000L, 0xff7fffffff7fffffL
};
static final long[] jjbitVec5 = {
   0xffffcffffffffL, 0xffffffffffff0000L, 0xf9ff3fffffffffffL, 0x401f00030003L
};
static final long[] jjbitVec6 = {
   0x0L, 0x400000000000000L, 0xfffffffbffffd740L, 0xffffffcff7fffL
};
static final long[] jjbitVec7 = {
   0xffffffffffffffffL, 0xffffffffffffffffL, 0xfffffffffffff003L, 0x33fffffffff199fL
};
static final long[] jjbitVec8 = {
   0xfffe000000000000L, 0xfffffffe027fffffL, 0xffL, 0x707ffffff0000L
};
static final long[] jjbitVec9 = {
   0x7fffffe00000000L, 0xfffe0000000007ffL, 0xffffffffffffffffL, 0x1c000060002fffffL
};
static final long[] jjbitVec10 = {
   0x1ffffffd0000L, 0x0L, 0x3fffffffffL, 0x0L
};
static final long[] jjbitVec11 = {
   0x23ffffffffffffe0L, 0x3ff010000L, 0x3c5fdfffff99fe0L, 0xf0003b0000000L
};
static final long[] jjbitVec12 = {
   0x36dfdfffff987e0L, 0x1c00005e000000L, 0x23edfdfffffbafe0L, 0x100010000L
};
static final long[] jjbitVec13 = {
   0x23cdfdfffff99fe0L, 0x3b0000000L, 0x3bfc718d63dc7e0L, 0x0L
};
static final long[] jjbitVec14 = {
   0x3effdfffffddfe0L, 0x300000000L, 0x3effdfffffddfe0L, 0x340000000L
};
static final long[] jjbitVec15 = {
   0x3fffdfffffddfe0L, 0x300000000L, 0x2ffbfffffc7fffe0L, 0x7fL
};
static final long[] jjbitVec16 = {
   0x800dfffffffffffeL, 0x7fL, 0x200decaefef02596L, 0x3000005fL
};
static final long[] jjbitVec17 = {
   0x1L, 0x7fffffffeffL, 0xf00L, 0x0L
};
static final long[] jjbitVec18 = {
   0x6fbffffffffL, 0x3f0000L, 0xffffffff00000000L, 0x7fffffffff003fL
};
static final long[] jjbitVec19 = {
   0xffffffffffffffffL, 0xffffffff83ffffffL, 0xffffff07ffffffffL, 0x3ffffffffffffffL
};
static final long[] jjbitVec20 = {
   0xffffffffffffff7fL, 0xffffffff3d7f3d7fL, 0x7f3d7fffffff3d7fL, 0xffff7fffff7f7f3dL
};
static final long[] jjbitVec21 = {
   0xffffffff7f3d7fffL, 0x7ffff7fL, 0xffffffff00000000L, 0x1fffffffffffffL
};
static final long[] jjbitVec22 = {
   0xffffffffffffffffL, 0x7f9fffffffffffL, 0xffffffff07fffffeL, 0x7ffffffffffL
};
static final long[] jjbitVec23 = {
   0x0L, 0x0L, 0xfffffffffffffL, 0x8000000L
};
static final long[] jjbitVec24 = {
   0xffffffff00000000L, 0xffffffffffffffL, 0x1ffffffffffL, 0x0L
};
static final long[] jjbitVec25 = {
   0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffff0fffffffL, 0x3ffffffffffffffL
};
static final long[] jjbitVec26 = {
   0xffffffff3f3fffffL, 0x3fffffffaaff3f3fL, 0x5fdfffffffffffffL, 0x1fdc1fff0fcf1fdcL
};
static final long[] jjbitVec27 = {
   0x8000000000000000L, 0x8000000000000001L, 0xffff00000000L, 0x0L
};
static final long[] jjbitVec28 = {
   0x3fbbd503e2ffc84L, 0xffffffff00000000L, 0xfL, 0x0L
};
static final long[] jjbitVec29 = {
   0x73e03fe000000e0L, 0xfffffffffffffffeL, 0xfffffffe601fffffL, 0x7fffffffffffffffL
};
static final long[] jjbitVec30 = {
   0xfffe1fffffffffe0L, 0xffffffffffffffffL, 0xffffff00007fffL, 0x0L
};
static final long[] jjbitVec31 = {
   0xffffffffffffffffL, 0xffffffffffffffffL, 0x3fffffffffffffL, 0x0L
};
static final long[] jjbitVec32 = {
   0xffffffffffffffffL, 0xffffffffffffffffL, 0x3fffffffffL, 0x0L
};
static final long[] jjbitVec33 = {
   0xffffffffffffffffL, 0xffffffffffffffffL, 0x1fffL, 0x0L
};
static final long[] jjbitVec34 = {
   0xffffffffffffffffL, 0xffffffffffffffffL, 0xfffffffffL, 0x0L
};
static final long[] jjbitVec35 = {
   0x3fffffffffffL, 0x0L, 0x0L, 0x0L
};
static final long[] jjbitVec36 = {
   0x5f7ffdffa0f8007fL, 0xffffffffffffffdbL, 0x3ffffffffffffL, 0xfffffffffff80000L
};
static final long[] jjbitVec37 = {
   0x3fffffffffffffffL, 0xffffffffffff0000L, 0xfffffffffffcffffL, 0xfff0000000000ffL
};
static final long[] jjbitVec38 = {
   0x18000000000000L, 0xffd702000000e000L, 0xffffffffffffffffL, 0x1fffffffffffffffL
};
static final long[] jjbitVec39 = {
   0x87fffffe00000010L, 0xffffffe007fffffeL, 0x7fffffffffffffffL, 0x631cfcfcfcL
};
private int jjMoveNfa_4(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 28;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if (curChar == 46)
                     jjCheckNAddStates(138, 140);
                  else if (curChar == 35)
                     jjstateSet[jjnewStateCnt++] = 26;
                  else if (curChar == 39)
                     jjCheckNAddStates(141, 143);
                  else if (curChar == 36)
                     jjAddStates(144, 146);
                  break;
               case 2:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(2, 3);
                  break;
               case 3:
                  if (curChar == 46)
                     jjCheckNAddStates(138, 140);
                  break;
               case 4:
                  if (curChar == 36)
                     jjCheckNAddTwoStates(5, 17);
                  break;
               case 6:
                  if (curChar == 36)
                     jjCheckNAddTwoStates(7, 12);
                  break;
               case 7:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 307)
                     kind = 307;
                  jjCheckNAdd(7);
                  break;
               case 8:
                  if (curChar == 33 && kind > 307)
                     kind = 307;
                  break;
               case 12:
                  if (curChar == 35)
                     jjstateSet[jjnewStateCnt++] = 11;
                  break;
               case 13:
                  if (curChar == 33)
                     jjCheckNAddStates(147, 149);
                  break;
               case 17:
                  if (curChar == 35)
                     jjstateSet[jjnewStateCnt++] = 16;
                  break;
               case 18:
               case 19:
                  if (curChar == 39)
                     jjCheckNAddStates(141, 143);
                  break;
               case 20:
                  if (curChar == 39)
                     jjstateSet[jjnewStateCnt++] = 19;
                  break;
               case 21:
                  if ((0xffffff7fffffffffL & l) != 0L)
                     jjCheckNAddStates(141, 143);
                  break;
               case 22:
                  if (curChar == 39)
                     jjCheckNAdd(3);
                  break;
               case 23:
                  if (curChar == 33)
                     jjCheckNAdd(3);
                  break;
               case 27:
                  if (curChar == 35)
                     jjstateSet[jjnewStateCnt++] = 26;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
               case 1:
               case 2:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(2, 3);
                  break;
               case 5:
                  if ((0x7fffffeL & l) != 0L)
                     jjAddStates(150, 153);
                  break;
               case 9:
                  if (curChar == 70)
                     jjstateSet[jjnewStateCnt++] = 8;
                  break;
               case 10:
                  if (curChar == 69)
                     jjstateSet[jjnewStateCnt++] = 9;
                  break;
               case 11:
                  if (curChar == 82)
                     jjstateSet[jjnewStateCnt++] = 10;
                  break;
               case 14:
                  if (curChar == 70)
                     jjstateSet[jjnewStateCnt++] = 13;
                  break;
               case 15:
                  if (curChar == 69)
                     jjstateSet[jjnewStateCnt++] = 14;
                  break;
               case 16:
                  if (curChar == 82)
                     jjstateSet[jjnewStateCnt++] = 15;
                  break;
               case 21:
                  jjAddStates(141, 143);
                  break;
               case 24:
                  if (curChar == 70)
                     jjstateSet[jjnewStateCnt++] = 23;
                  break;
               case 25:
                  if (curChar == 69)
                     jjstateSet[jjnewStateCnt++] = 24;
                  break;
               case 26:
                  if (curChar == 82)
                     jjstateSet[jjnewStateCnt++] = 25;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
               case 1:
               case 2:
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                     jjCheckNAddTwoStates(2, 3);
                  break;
               case 21:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjAddStates(141, 143);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 28 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
static final int[] jjnextStates = {
   43, 44, 45, 50, 51, 54, 55, 164, 70, 168, 104, 172, 124, 64, 75, 127, 
   54, 130, 143, 144, 145, 147, 148, 149, 151, 152, 153, 155, 156, 157, 10, 12, 
   13, 125, 54, 126, 134, 106, 107, 110, 108, 135, 74, 75, 105, 63, 64, 71, 
   113, 114, 121, 79, 91, 82, 83, 96, 34, 40, 82, 83, 90, 93, 94, 95, 
   127, 54, 130, 137, 138, 139, 143, 144, 145, 147, 148, 149, 151, 152, 153, 155, 
   156, 157, 59, 60, 61, 62, 72, 73, 106, 107, 110, 140, 64, 65, 66, 75, 
   76, 77, 127, 128, 129, 130, 131, 15, 25, 19, 127, 128, 129, 75, 76, 77, 
   64, 65, 66, 16, 17, 20, 24, 7, 8, 21, 22, 48, 49, 52, 53, 83, 
   84, 85, 114, 115, 116, 127, 128, 129, 130, 131, 4, 5, 17, 20, 21, 22, 
   1, 18, 27, 6, 7, 12, 5, 6, 7, 12, 
};
private static final boolean jjCanMove_0(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 0:
         return ((jjbitVec2[i2] & l2) != 0L);
      default :
         if ((jjbitVec0[i1] & l1) != 0L)
            return true;
         return false;
   }
}
private static final boolean jjCanMove_1(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 0:
         return ((jjbitVec4[i2] & l2) != 0L);
      case 2:
         return ((jjbitVec5[i2] & l2) != 0L);
      case 3:
         return ((jjbitVec6[i2] & l2) != 0L);
      case 4:
         return ((jjbitVec7[i2] & l2) != 0L);
      case 5:
         return ((jjbitVec8[i2] & l2) != 0L);
      case 6:
         return ((jjbitVec9[i2] & l2) != 0L);
      case 7:
         return ((jjbitVec10[i2] & l2) != 0L);
      case 9:
         return ((jjbitVec11[i2] & l2) != 0L);
      case 10:
         return ((jjbitVec12[i2] & l2) != 0L);
      case 11:
         return ((jjbitVec13[i2] & l2) != 0L);
      case 12:
         return ((jjbitVec14[i2] & l2) != 0L);
      case 13:
         return ((jjbitVec15[i2] & l2) != 0L);
      case 14:
         return ((jjbitVec16[i2] & l2) != 0L);
      case 15:
         return ((jjbitVec17[i2] & l2) != 0L);
      case 16:
         return ((jjbitVec18[i2] & l2) != 0L);
      case 17:
         return ((jjbitVec19[i2] & l2) != 0L);
      case 18:
         return ((jjbitVec20[i2] & l2) != 0L);
      case 19:
         return ((jjbitVec21[i2] & l2) != 0L);
      case 20:
         return ((jjbitVec0[i2] & l2) != 0L);
      case 22:
         return ((jjbitVec22[i2] & l2) != 0L);
      case 23:
         return ((jjbitVec23[i2] & l2) != 0L);
      case 24:
         return ((jjbitVec24[i2] & l2) != 0L);
      case 30:
         return ((jjbitVec25[i2] & l2) != 0L);
      case 31:
         return ((jjbitVec26[i2] & l2) != 0L);
      case 32:
         return ((jjbitVec27[i2] & l2) != 0L);
      case 33:
         return ((jjbitVec28[i2] & l2) != 0L);
      case 48:
         return ((jjbitVec29[i2] & l2) != 0L);
      case 49:
         return ((jjbitVec30[i2] & l2) != 0L);
      case 77:
         return ((jjbitVec31[i2] & l2) != 0L);
      case 159:
         return ((jjbitVec32[i2] & l2) != 0L);
      case 164:
         return ((jjbitVec33[i2] & l2) != 0L);
      case 215:
         return ((jjbitVec34[i2] & l2) != 0L);
      case 250:
         return ((jjbitVec35[i2] & l2) != 0L);
      case 251:
         return ((jjbitVec36[i2] & l2) != 0L);
      case 253:
         return ((jjbitVec37[i2] & l2) != 0L);
      case 254:
         return ((jjbitVec38[i2] & l2) != 0L);
      case 255:
         return ((jjbitVec39[i2] & l2) != 0L);
      default :
         if ((jjbitVec3[i1] & l1) != 0L)
            return true;
         return false;
   }
}

/** Token literal values. */
public static final String[] jjstrLiteralImages = {
"", null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, 
"\137\155\151\156\137", "\137\155\141\170\137", "\75", "\74\76", "\74", "\74\75", "\76", "\76\75", 
"\46", "\53", "\55", "\52", "\57", "\136", "\45", "\50", "\51", 
"\137\155\151\156\166\141\154\165\145", "\137\155\141\170\166\141\154\165\145", "\100", "\101\102\123", 
"\101\103\117\123", "\101\103\117\123\110", "\101\123\103", "\101\123\111\116", 
"\101\123\111\116\110", "\101\124\101\116", "\101\124\101\116\110", "\101\124\101\116\62", 
"\101\116\104", "\101\126\105\104\105\126", "\101\126\105\122\101\107\105", 
"\102\105\124\101\104\111\123\124", "\102\105\124\101\111\116\126", "\102\111\116\117\115\104\111\123\124", 
"\103\105\111\114\111\116\107", "\103\110\101\122", "\103\110\111\104\111\123\124", 
"\103\110\111\111\116\126", "\103\110\111\124\105\123\124", "\103\110\117\117\123\105", 
"\103\114\105\101\116", "\103\117\104\105", "\103\117\114\125\115\116", "\103\117\115\102\111\116", 
"\103\117\116\103\101\124\105\116\101\124\105", "\103\117\116\106\111\104\105\116\103\105", "\103\117\122\122\105\114", 
"\103\117\123", "\103\117\123\110", "\103\117\125\116\124", "\103\117\125\116\124\101", 
"\103\117\125\116\124\111\106", "\103\117\126\101\122", "\103\122\111\124\102\111\116\117\115", 
"\104\101\124\105", "\104\101\124\105\126\101\114\125\105", "\104\101\126\105\122\101\107\105", 
"\104\101\131", "\104\101\131\123\63\66\60", "\104\102", "\104\103\117\125\116\124", 
"\104\103\117\125\116\124\101", "\104\104\102", "\104\105\107\122\105\105\123", "\104\105\126\123\121", 
"\104\107\105\124", "\104\115\101\130", "\104\115\111\116", "\104\117\114\114\101\122", 
"\104\120\122\117\104\125\103\124", "\104\123\124\104\105\126", "\104\123\124\104\105\126\120", 
"\104\123\125\115", "\104\126\101\122", "\104\126\101\122\120", "\105\122\106", 
"\105\122\106\103", "\145\162\162", "\105\122\122\117\122\56\124\131\120\105", 
"\105\122\122\117\122\124\131\120\105", "\105\130\101\103\124", "\105\130\120\117\116\104\111\123\124", 
"\105\126\105\116", "\105\130\120", "\106\101\103\124", "\106\101\114\123\105", 
"\146\141\154\163\145", "\106\104\111\123\124", "\106\111\116\126", "\106\124\105\123\124", 
"\106\111\116\104", "\106\111\123\110\105\122", "\106\111\123\110\105\122\111\116\126", 
"\106\111\130\105\104", "\106\114\117\117\122", "\106\117\122\105\103\101\123\124", "\106\126", 
"\107\101\115\115\101\104\111\123\124", "\107\101\115\115\101\111\116\126", "\107\101\115\115\101\114\116", 
"\107\105\117\115\105\101\116", "\110\101\122\115\105\101\116", "\110\114\117\117\113\125\120", 
"\110\117\125\122", "\110\131\120\107\105\117\115\104\111\123\124", "\111\106", 
"\111\116\104\105\130", "\111\116\124", "\111\116\124\105\122\103\105\120\124", "\111\122\122", 
"\111\123\102\114\101\116\113", "\111\123\105\122\122", "\111\123\105\122\122\117\122", 
"\111\123\114\117\107\111\103\101\114", "\111\123\116\101", "\111\123\116\117\116\124\105\130\124", 
"\111\123\116\125\115\102\105\122", "\111\123\124\105\130\124", "\113\125\122\124", "\114\101\122\107\105", 
"\114\105\106\124", "\114\105\107\101\103\131\56\103\110\111\104\111\123\124", 
"\114\105\107\101\103\131\56\103\110\111\111\116\126", "\114\105\107\101\103\131\56\103\110\111\124\105\123\124", 
"\114\105\107\101\103\131\56\106\104\111\123\124", "\114\105\107\101\103\131\56\106\111\116\126", 
"\114\105\107\101\103\131\56\116\117\122\115\123\104\111\123\124", "\114\105\107\101\103\131\56\116\117\122\115\123\111\116\126", "\114\105\116", 
"\114\105\116\102", "\114\116", "\114\117\107", "\114\117\107\61\60", "\114\117\107\111\116\126", 
"\114\117\107\116\117\122\115\104\111\123\124", "\114\117\117\113\125\120", "\114\117\127\105\122", "\115\101\130", 
"\115\101\124\103\110", "\115\104\105\124\105\122\115", "\115\105\104\111\101\116", "\115\111\104", 
"\115\111\116", "\115\111\116\125\124\105", "\115\111\122\122", "\115\117\104", 
"\115\117\104\105", "\115\117\116\124\110", "\115\122\117\125\116\104", "\116", "\116\101", 
"\116\105\107\102\111\116\117\115\104\111\123\124", "\116\117\122\115\104\111\123\124", "\116\117\122\115\111\116\126", 
"\116\117\122\115\123\104\111\123\124", "\116\117\122\115\123\111\116\126", "\116\117\124", "\116\117\127", 
"\116\120\105\122", "\116\120\126", "\117\104\104", "\117\122", 
"\117\122\107\56\117\120\105\116\117\106\106\111\103\105\56\105\122\122\117\122\124\131\120\105", "\120\105\101\122\123\117\116", "\120\105\122\115\125\124", 
"\120\105\122\103\105\116\124\111\114\105", "\120\105\122\103\105\116\124\122\101\116\113", "\120\111", "\120\115\124", 
"\120\117\111\123\123\117\116", "\120\117\127\105\122", "\120\122\117\102", "\120\122\117\104\125\103\124", 
"\120\122\117\120\105\122", "\120\126", "\121\125\101\122\124\111\114\105", 
"\122\101\104\111\101\116\123", "\122\101\116\104", "\122\101\116\113", "\122\101\124\105", 
"\122\105\120\114\101\103\105", "\122\105\120\124", "\122\111\107\110\124", "\122\117\115\101\116", 
"\122\117\125\116\104", "\122\117\125\116\104\104\117\127\116", "\122\117\125\116\104\125\120", 
"\122\117\127", "\122\123\121", "\123\105\101\122\103\110", "\123\105\103\117\116\104", 
"\123\111\107\116", "\123\111\116", "\123\111\116\110", "\123\113\105\127", "\123\114\116", 
"\123\114\117\120\105", "\123\115\101\114\114", "\123\121\122\124", 
"\123\124\101\116\104\101\122\104\111\132\105", "\123\124\104\105\126", "\123\124\104\105\126\120", 
"\123\124\104\105\126\120\101", "\123\124\105\131\130", "\123\125\102\123\124\111\124\125\124\105", 
"\123\125\115", "\123\125\115\111\106", "\123\125\115\123\121", 
"\123\125\115\130\62\115\131\62", "\123\125\115\130\62\120\131\62", "\123\125\115\130\115\131\62", 
"\123\131\104", "\124", "\124\101\116", "\124\101\116\110", "\124\104\111\123\124", 
"\124\111\116\126", "\124\124\105\123\124", "\124\105\130\124", "\124\111\115\105", 
"\124\111\115\105\126\101\114\125\105", "\124\117\104\101\131", "\124\122\111\115", 
"\124\122\111\115\115\105\101\116", "\124\122\125\105", "\164\162\165\145", "\124\122\125\116\103", 
"\125\120\120\105\122", "\126\101\114\125\105", "\126\101\122", "\126\101\122\101", 
"\126\101\122\120", "\126\104\102", "\126\114\117\117\113\125\120", 
"\127\105\105\113\104\101\131", "\127\105\111\102\125\114\114", "\131\105\101\122", "\132\124\105\123\124", 
"\41", "\162\165\154\145\163", "\173", "\175", "\162\145\167\162\151\164\145", 
"\144\145\146", "\43", "\154\145\164", "\151\146", "\146\157\154\144", 
"\146\157\154\144\57\162\145\144\165\143\145", "\151\164\145\162\141\164\145", "\141\160\160\154\171", "\151\156", 
"\164\150\145\156", "\145\154\163\145", "\167\151\164\150", "\151\156\144\145\170", 
"\145\141\143\150", "\141\163", "\143\157\165\156\164", "\151\156\164\157", "\167\150\145\156", 
"\145\155\160\164\171", "\145\156\144", "\164\157", "\154\151\163\164", 
"\166\145\143\164\157\162\163", null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, "\72", "\133", null, "\72", null, null, "\135", null, null, null, };

/** Lexer state names. */
public static final String[] lexStateNames = {
   "DEFAULT",
   "IN_SINGLE_LINE_COMMENT",
   "IN_FORMAL_COMMENT",
   "IN_MULTI_LINE_COMMENT",
   "IN_ODF_CELL_REF",
};

/** Lex State array. */
public static final int[] jjnewLexState = {
   -1, -1, -1, -1, -1, -1, 1, 2, 3, 0, 0, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, 4, -1, -1, -1, -1, 0, -1, -1, -1, 
};
static final long[] jjtoToken = {
   0xffffffffffb00001L, 0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffffffffffffL, 
   0x79f1847ffffffffL, 
};
static final long[] jjtoSkip = {
   0xe3eL, 0x0L, 0x0L, 0x0L, 
   0x0L, 
};
static final long[] jjtoSpecial = {
   0xe00L, 0x0L, 0x0L, 0x0L, 
   0x0L, 
};
static final long[] jjtoMore = {
   0x11c0L, 0x0L, 0x0L, 0x0L, 
   0x0L, 
};
protected CharStream input_stream;
private final int[] jjrounds = new int[173];
private final int[] jjstateSet = new int[346];
private final StringBuilder jjimage = new StringBuilder();
private StringBuilder image = jjimage;
private int jjimageLen;
private int lengthOfMatch;
protected char curChar;
/** Constructor. */
public GeneratedExpressionParserTokenManager(CharStream stream){
   input_stream = stream;
}

/** Constructor. */
public GeneratedExpressionParserTokenManager(CharStream stream, int lexState){
   this(stream);
   SwitchTo(lexState);
}

/** Reinitialise parser. */
public void ReInit(CharStream stream)
{
   jjmatchedPos = jjnewStateCnt = 0;
   curLexState = defaultLexState;
   input_stream = stream;
   ReInitRounds();
}
private void ReInitRounds()
{
   int i;
   jjround = 0x80000001;
   for (i = 173; i-- > 0;)
      jjrounds[i] = 0x80000000;
}

/** Reinitialise parser. */
public void ReInit(CharStream stream, int lexState)
{
   ReInit(stream);
   SwitchTo(lexState);
}

/** Switch to specified lex state. */
public void SwitchTo(int lexState)
{
   if (lexState >= 5 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
   else
      curLexState = lexState;
}

protected Token jjFillToken()
{
   final Token t;
   final String curTokenImage;
   final int beginLine;
   final int endLine;
   final int beginColumn;
   final int endColumn;
   String im = jjstrLiteralImages[jjmatchedKind];
   curTokenImage = (im == null) ? input_stream.GetImage() : im;
   beginLine = input_stream.getBeginLine();
   beginColumn = input_stream.getBeginColumn();
   endLine = input_stream.getEndLine();
   endColumn = input_stream.getEndColumn();
   t = Token.newToken(jjmatchedKind, curTokenImage);

   t.beginLine = beginLine;
   t.endLine = endLine;
   t.beginColumn = beginColumn;
   t.endColumn = endColumn;

   return t;
}

int curLexState = 0;
int defaultLexState = 0;
int jjnewStateCnt;
int jjround;
int jjmatchedPos;
int jjmatchedKind;

/** Get the next Token. */
public Token getNextToken() 
{
  Token specialToken = null;
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {
   try
   {
      curChar = input_stream.BeginToken();
   }
   catch(java.io.IOException e)
   {
      jjmatchedKind = 0;
      matchedToken = jjFillToken();
      matchedToken.specialToken = specialToken;
      return matchedToken;
   }
   image = jjimage;
   image.setLength(0);
   jjimageLen = 0;

   for (;;)
   {
     switch(curLexState)
     {
       case 0:
         try { input_stream.backup(0);
            while (curChar <= 32 && (0x100003600L & (1L << curChar)) != 0L)
               curChar = input_stream.BeginToken();
         }
         catch (java.io.IOException e1) { continue EOFLoop; }
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_0();
         break;
       case 1:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_1();
         if (jjmatchedPos == 0 && jjmatchedKind > 12)
         {
            jjmatchedKind = 12;
         }
         break;
       case 2:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_2();
         if (jjmatchedPos == 0 && jjmatchedKind > 12)
         {
            jjmatchedKind = 12;
         }
         break;
       case 3:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_3();
         if (jjmatchedPos == 0 && jjmatchedKind > 12)
         {
            jjmatchedKind = 12;
         }
         break;
       case 4:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_4();
         break;
     }
     if (jjmatchedKind != 0x7fffffff)
     {
        if (jjmatchedPos + 1 < curPos)
           input_stream.backup(curPos - jjmatchedPos - 1);
        if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
        {
           matchedToken = jjFillToken();
           matchedToken.specialToken = specialToken;
       if (jjnewLexState[jjmatchedKind] != -1)
         curLexState = jjnewLexState[jjmatchedKind];
           return matchedToken;
        }
        else if ((jjtoSkip[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
        {
           if ((jjtoSpecial[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
           {
              matchedToken = jjFillToken();
              if (specialToken == null)
                 specialToken = matchedToken;
              else
              {
                 matchedToken.specialToken = specialToken;
                 specialToken = (specialToken.next = matchedToken);
              }
              SkipLexicalActions(matchedToken);
           }
           else
              SkipLexicalActions(null);
         if (jjnewLexState[jjmatchedKind] != -1)
           curLexState = jjnewLexState[jjmatchedKind];
           continue EOFLoop;
        }
        MoreLexicalActions();
      if (jjnewLexState[jjmatchedKind] != -1)
        curLexState = jjnewLexState[jjmatchedKind];
        curPos = 0;
        jjmatchedKind = 0x7fffffff;
        try {
           curChar = input_stream.readChar();
           continue;
        }
        catch (java.io.IOException e1) { }
     }
     int error_line = input_stream.getEndLine();
     int error_column = input_stream.getEndColumn();
     String error_after = null;
     boolean EOFSeen = false;
     try { input_stream.readChar(); input_stream.backup(1); }
     catch (java.io.IOException e1) {
        EOFSeen = true;
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
        if (curChar == '\n' || curChar == '\r') {
           error_line++;
           error_column = 0;
        }
        else
           error_column++;
     }
     if (!EOFSeen) {
        input_stream.backup(1);
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
     }
     throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
   }
  }
}

void SkipLexicalActions(Token matchedToken)
{
   switch(jjmatchedKind)
   {
      default :
         break;
   }
}
void MoreLexicalActions()
{
   jjimageLen += (lengthOfMatch = jjmatchedPos + 1);
   switch(jjmatchedKind)
   {
      case 7 :
         image.append(input_stream.GetSuffix(jjimageLen));
         jjimageLen = 0;
                                 input_stream.backup(1);
         break;
      default :
         break;
   }
}
private void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
private void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
private void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}

private void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}

}
