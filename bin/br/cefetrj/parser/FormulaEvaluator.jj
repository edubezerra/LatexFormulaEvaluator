options{  STATIC = false;  LOOKAHEAD= 2;  DEBUG_PARSER = false;}PARSER_BEGIN(FormulaEvaluator)package br.cefetrj.parser;import java.io.StringReader;import java.io.Reader;import java.io.ByteArrayInputStream;public class FormulaEvaluator{  /*    ** A String based constructor for ease of use.  */  public FormulaEvaluator(String s)  {    this ((Reader) (new StringReader(s)));  }  public void parse() throws Exception  {    this.evaluate();  }  public double evaluate() throws Exception  {    return this.eval();  }  public static void main(String args []) throws ParseException  {    FormulaEvaluator parser = new FormulaEvaluator(System.in);    while (true)    {      System.out.println("Reading from standard input...");      System.out.print("Enter an expression like \"1+(2+3)*4\" :");      try      {        System.out.println(parser.eval());      }      catch (br.cefetrj.parser.ParseException e)      {        e.printStackTrace();        System.out.println("NOK.");        System.out.println(e.getMessage());        parser.ReInit(System.in);      }      catch (Error e)      {        System.out.println("Oops.");        System.out.println(e.getMessage());        break;      }    }  }}PARSER_END(FormulaEvaluator)SKIP :{  " "| "\t"| "\r"}TOKEN :{  < EIGENVALUE_IDENTIFIER :    "q_" < DIGITS >  | "\\lambda_" < DIGITS >  | "\\mu_" < DIGITS >>}TOKEN : /* Numeric constants */{  < INT_CONST : < DIGITS >>| < DBL_CONST :    < DIGITS > "." (< DIGIT >)* (< EXPONENT >)?  | "." < DIGITS > (< EXPONENT >)?  | < DIGITS > < EXPONENT >>| < #EXPONENT : [ "e", "E" ] ([ "+", "-" ])? < DIGITS >>}TOKEN : /* Helpers */{  < #DIGITS : (< DIGIT >)+ >| < #DIGIT : [ "0"-"9" ] >}TOKEN :{  < EOL : "\n" >}TOKEN :{  < PLUS : "+" >}TOKEN :{  < MINUS : "-" >}TOKEN :{  < POWER : "^" >}double eval() :{  double value;}{  value = expr()  (    < EOF >  | < EOL >  )  {    return value;  }}double expr() :{  double x;  double y;}{  x = term()  (    < PLUS > y = term()    {      x += y;    }  | < MINUS > y = term()    {      x -= y;    }  )*  {    return x;  }}double term() :{  double x;  double y;}{  x = expExpr()  (    "*" y = expExpr()    {      x *= y;    }  | "/" y = expExpr()    {      x /= y;    }  )*  {    return x;  }| "\\frac{" x = expr() "}" "{" y = expr() "}"  {    return x / y;  }}double expExpr() :{  double x;  double y;}{  x = value()  (    < POWER > y = value()    {      return Math.pow(x, y);    }  )?  {    return x;  }}double value() :{  double value;}{  "-" value = number()  {    return - value;  }| value = number()  {    return value;  }}double number() :{  Token t;  double value;}{  t = < EIGENVALUE_IDENTIFIER >  {    return 1.0;  }| t = < DBL_CONST >  {    return Double.parseDouble(t.image);  }| t = < INT_CONST >  {    return Double.parseDouble(t.image);  }| "(" value = expr() ")"  {    return value;  }}
